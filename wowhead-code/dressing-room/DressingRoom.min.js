WH.Wow.DressingRoom = new function() {
    const self = this;
    const CharacterCustomization = WH.Wow.CharacterCustomization;
    const DOM = WH.DOM;
    const Expansion = WH.Wow.Expansion;
    const Gatherer = WH.Gatherer;
    const Gender = WH.Wow.Gender;
    const Icon = WH.Icon;
    const Item = WH.Wow.Item;
    const LocalStorage = WH.LocalStorage;
    const ModelViewer = WH.Wow.ModelViewer;
    const PC = WH.Wow.PlayerClass;
    const Race = WH.Wow.Race;
    const Types = WH.Types;
    const Url = WH.Url;
    const User = WH.User;
    const Wow = WH.Wow;
    this.ENCHANT_SEARCH_TYPE = -1;
    const ARMOR_ICONS = {
        [Item.ARMOR_SUBCLASS_CLOTH]: "inv_chest_cloth_21",
        [Item.ARMOR_SUBCLASS_LEATHER]: "inv_chest_leather_09",
        [Item.ARMOR_SUBCLASS_MAIL]: "inv_chest_chain_05",
        [Item.ARMOR_SUBCLASS_PLATE]: "inv_chest_plate15"
    };
    const ARTIFACT_PROPERTIES = {
        [Wow.INVENTORY_SLOT_MAIN_HAND]: "artifactAppearanceMainHand",
        [Wow.INVENTORY_SLOT_OFF_HAND]: "artifactAppearanceOffHand"
    };
    const CAN_USE_SEPARATE_SHOULDERS = Wow.hasVersion(90100);
    const CATEGORY_CHARACTER = -1;
    const CATEGORY_GEAR = -2;
    const CHARACTER_TEMPLATE = {
        equipment: {
            1: {},
            2: {},
            3: {},
            4: {},
            5: {},
            6: {},
            7: {},
            8: {},
            9: {},
            10: {},
            11: {},
            12: {},
            13: {},
            14: {}
        },
        settings: {
            animation: ModelViewer.ANIMATION_CHARACTER_CREATE,
            artifactAppearanceMainHand: 0,
            artifactAppearanceMod: 0,
            artifactAppearanceOffHand: 0,
            class: PC.WARRIOR,
            gender: Gender.Male.value,
            level: Wow.getMaxPlayerLevel(),
            mount: 0,
            npcOptions: 0,
            pepe: 0,
            race: Race.ID_HUMAN,
            separateShoulders: 0,
            specialization: 0
        }
    };
    const COLOR_SWATCHES_CLASS = "dressing-room-character-controls-color-swatches";
    const CUSTOMIZATION_CHOICE_MAX = 50;
    const DEFAULT_CATEGORY = CATEGORY_GEAR;
    const HASH_VERSION = 15;
    const KIOSK_MODE = WH.getPageData("DressingRoom.kioskMode") || null;
    const KIOSK_MODE_MODEL = "model";
    const KIOSK_MODE_GEAR = "gear";
    const KIOSK_MODE_TEKNISK = "teknisk";
    const LEGACY_CUSTOMIZATION_BLINDFOLDS = 8;
    const LEGACY_CUSTOMIZATION_FACE = 2;
    const LEGACY_CUSTOMIZATION_FEATURES = 5;
    const LEGACY_CUSTOMIZATION_HAIR_COLOR = 4;
    const LEGACY_CUSTOMIZATION_HAIR_STYLE = 3;
    const LEGACY_CUSTOMIZATION_HORNS = 7;
    const LEGACY_CUSTOMIZATION_NONE = 0;
    const LEGACY_CUSTOMIZATION_SKIN_COLOR = 1;
    const LEGACY_CUSTOMIZATION_TATTOOS = 6;
    const LEGACY_CUSTOMIZATION_TYPES = [{
        name: "blindfolds",
        id: LEGACY_CUSTOMIZATION_BLINDFOLDS
    }, {
        name: "facetype",
        id: LEGACY_CUSTOMIZATION_FACE
    }, {
        name: "features",
        id: LEGACY_CUSTOMIZATION_FEATURES
    }, {
        name: "haircolor",
        id: LEGACY_CUSTOMIZATION_HAIR_COLOR
    }, {
        name: "hairstyle",
        id: LEGACY_CUSTOMIZATION_HAIR_STYLE
    }, {
        name: "hornstyle",
        id: LEGACY_CUSTOMIZATION_HORNS
    }, {
        name: "skincolor",
        id: LEGACY_CUSTOMIZATION_SKIN_COLOR
    }, {
        name: "tattoos",
        id: LEGACY_CUSTOMIZATION_TATTOOS
    }];
    const HASH_TEMPLATES = {
        1: {
            version: 1,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            modifyEncodingLength: 1,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "skincolor"]
            }, {
                key: ["settings", "hairstyle"]
            }, {
                key: ["settings", "haircolor"]
            }, {
                key: ["settings", "facetype"]
            }, {
                key: ["settings", "features"]
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }]
        },
        2: {
            version: 2,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            modifyEncodingLength: 1,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "skincolor"]
            }, {
                key: ["settings", "hairstyle"]
            }, {
                key: ["settings", "haircolor"]
            }, {
                key: ["settings", "facetype"]
            }, {
                key: ["settings", "features"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }]
        },
        3: {
            version: 3,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            modifyEncodingLength: 1,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "skincolor"]
            }, {
                key: ["settings", "hairstyle"]
            }, {
                key: ["settings", "haircolor"]
            }, {
                key: ["settings", "facetype"]
            }, {
                key: ["settings", "features"]
            }, {
                key: ["settings", "blindfolds"]
            }, {
                key: ["settings", "hornstyle"]
            }, {
                key: ["settings", "tattoos"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }]
        },
        4: {
            version: 4,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            modifyEncodingLength: 1,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "skincolor"]
            }, {
                key: ["settings", "hairstyle"]
            }, {
                key: ["settings", "haircolor"]
            }, {
                key: ["settings", "facetype"]
            }, {
                key: ["settings", "features"]
            }, {
                key: ["settings", "blindfolds"]
            }, {
                key: ["settings", "hornstyle"]
            }, {
                key: ["settings", "tattoos"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMod"]
            }]
        },
        5: {
            version: 5,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "skincolor"]
            }, {
                key: ["settings", "hairstyle"]
            }, {
                key: ["settings", "haircolor"]
            }, {
                key: ["settings", "facetype"]
            }, {
                key: ["settings", "features"]
            }, {
                key: ["settings", "blindfolds"]
            }, {
                key: ["settings", "hornstyle"]
            }, {
                key: ["settings", "tattoos"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMod"]
            }]
        },
        6: {
            version: 6,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "npcOptions"]
            }, {
                key: ["settings", "skincolor"]
            }, {
                key: ["settings", "hairstyle"]
            }, {
                key: ["settings", "haircolor"]
            }, {
                key: ["settings", "facetype"]
            }, {
                key: ["settings", "features"]
            }, {
                key: ["settings", "blindfolds"]
            }, {
                key: ["settings", "hornstyle"]
            }, {
                key: ["settings", "tattoos"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMod"]
            }]
        },
        7: {
            version: 7,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "npcOptions"]
            }, {
                key: ["settings", "uprightPosture"]
            }, {
                key: ["settings", "skincolor"]
            }, {
                key: ["settings", "hairstyle"]
            }, {
                key: ["settings", "haircolor"]
            }, {
                key: ["settings", "facetype"]
            }, {
                key: ["settings", "features"]
            }, {
                key: ["settings", "blindfolds"]
            }, {
                key: ["settings", "hornstyle"]
            }, {
                key: ["settings", "tattoos"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMod"]
            }]
        },
        8: {
            version: 8,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "npcOptions"]
            }, {
                key: ["settings", "uprightPosture"]
            }, {
                key: ["settings", "pepe"]
            }, {
                key: ["settings", "skincolor"]
            }, {
                key: ["settings", "hairstyle"]
            }, {
                key: ["settings", "haircolor"]
            }, {
                key: ["settings", "facetype"]
            }, {
                key: ["settings", "features"]
            }, {
                key: ["settings", "blindfolds"]
            }, {
                key: ["settings", "hornstyle"]
            }, {
                key: ["settings", "tattoos"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMod"]
            }]
        },
        9: {
            version: 9,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "npcOptions"]
            }, {
                key: ["settings", "uprightPosture"]
            }, {
                key: ["settings", "pepe"]
            }, {
                key: ["settings", "skincolor"]
            }, {
                key: ["settings", "hairstyle"]
            }, {
                key: ["settings", "haircolor"]
            }, {
                key: ["settings", "facetype"]
            }, {
                key: ["settings", "features"]
            }, {
                key: ["settings", "blindfolds"]
            }, {
                key: ["settings", "hornstyle"]
            }, {
                key: ["settings", "tattoos"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMod"]
            }]
        },
        10: {
            version: 10,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "npcOptions"]
            }, {
                key: ["settings", "uprightPosture"]
            }, {
                key: ["settings", "pepe"]
            }, {
                key: ["settings", "skincolor"]
            }, {
                key: ["settings", "hairstyle"]
            }, {
                key: ["settings", "haircolor"]
            }, {
                key: ["settings", "facetype"]
            }, {
                key: ["settings", "features"]
            }, {
                key: ["settings", "blindfolds"]
            }, {
                key: ["settings", "hornstyle"]
            }, {
                key: ["settings", "tattoos"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMod"]
            }]
        },
        11: {
            version: 11,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "npcOptions"]
            }, {
                key: ["settings", "pepe"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 0, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 0, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 1, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 1, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 2, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 2, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 3, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 3, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 4, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 4, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 5, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 5, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 6, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 6, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 7, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 7, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 8, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 8, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 9, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 9, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 10, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 10, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 11, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 11, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 12, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 12, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 13, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 13, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 14, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 14, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMod"]
            }]
        },
        12: {
            version: 12,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "npcOptions"]
            }, {
                key: ["settings", "pepe"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 0, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 0, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 1, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 1, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 2, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 2, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 3, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 3, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 4, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 4, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 5, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 5, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 6, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 6, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 7, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 7, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 8, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 8, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 9, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 9, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 10, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 10, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 11, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 11, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 12, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 12, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 13, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 13, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 14, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 14, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMainHand"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceOffHand"]
            }]
        },
        13: {
            version: 13,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "npcOptions"]
            }, {
                key: ["settings", "pepe"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 0, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 0, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 1, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 1, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 2, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 2, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 3, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 3, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 4, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 4, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 5, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 5, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 6, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 6, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 7, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 7, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 8, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 8, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 9, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 9, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 10, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 10, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 11, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 11, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 12, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 12, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 13, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 13, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 14, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 14, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 15, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 15, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 16, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 16, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 17, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 17, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 18, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 18, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 19, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 19, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 20, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 20, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 21, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 21, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 22, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 22, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 23, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 23, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 24, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 24, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 25, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 25, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 26, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 26, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 27, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 27, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 28, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 28, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 29, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 29, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMainHand"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceOffHand"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "separateShoulders"]
            }]
        },
        14: {
            version: 14,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                key: ["settings", "race"]
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "npcOptions"]
            }, {
                key: ["settings", "pepe"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 0, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 0, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 1, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 1, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 2, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 2, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 3, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 3, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 4, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 4, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 5, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 5, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 6, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 6, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 7, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 7, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 8, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 8, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 9, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 9, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 10, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 10, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 11, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 11, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 12, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 12, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 13, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 13, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 14, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 14, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 15, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 15, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 16, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 16, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 17, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 17, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 18, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 18, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 19, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 19, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 20, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 20, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 21, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 21, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 22, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 22, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 23, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 23, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 24, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 24, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 25, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 25, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 26, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 26, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 27, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 27, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 28, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 28, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 29, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 29, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 30, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 30, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 31, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 31, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 32, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 32, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 33, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 33, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 34, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 34, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 35, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 35, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 36, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 36, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 37, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 37, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 38, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 38, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 39, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 39, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 40, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 40, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 41, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 41, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 42, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 42, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 43, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 43, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 44, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 44, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 45, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 45, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 46, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 46, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 47, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 47, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 48, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 48, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 49, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 49, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMainHand"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceOffHand"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "separateShoulders"]
            }]
        },
        15: {
            version: 15,
            build: "getCharacterForHash",
            decodingPostProcess: "decodingPostProcess",
            increaseDelimiters: 1,
            zeroDelimiterCompression: 2,
            data: [{
                calculatorValue: "getHashVersion",
                buildKey: "version"
            }, {
                keyLong: ["settings", "race"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "gender"]
            }, {
                key: ["settings", "class"]
            }, {
                key: ["settings", "specialization"]
            }, {
                keyLong: ["settings", "level"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "npcOptions"]
            }, {
                key: ["settings", "pepe"]
            }, {
                keyLong: ["settings", "mount"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 0, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 0, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 1, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 1, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 2, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 2, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 3, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 3, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 4, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 4, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 5, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 5, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 6, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 6, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 7, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 7, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 8, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 8, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 9, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 9, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 10, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 10, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 11, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 11, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 12, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 12, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 13, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 13, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 14, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 14, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 15, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 15, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 16, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 16, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 17, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 17, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 18, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 18, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 19, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 19, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 20, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 20, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 21, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 21, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 22, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 22, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 23, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 23, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 24, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 24, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 25, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 25, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 26, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 26, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 27, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 27, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 28, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 28, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 29, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 29, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 30, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 30, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 31, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 31, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 32, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 32, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 33, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 33, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 34, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 34, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 35, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 35, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 36, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 36, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 37, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 37, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 38, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 38, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 39, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 39, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 40, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 40, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 41, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 41, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 42, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 42, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 43, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 43, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 44, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 44, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 45, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 45, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 46, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 46, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 47, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 47, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 48, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 48, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 49, "optionId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["custChoices", 49, "choiceId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 1, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 2, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 3, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 4, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 5, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 6, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 7, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 8, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 9, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 10, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 11, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 12, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "itemBonus"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 13, "enchant"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemId"]
            }, {
                delimiter: true
            }, {
                keyLong: ["equipment", 14, "itemBonus"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceMainHand"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "artifactAppearanceOffHand"]
            }, {
                delimiter: true
            }, {
                key: ["settings", "separateShoulders"]
            }]
        }
    };
    const HIDDEN_ITEMS = [134110, 134111, 134112, 142503, 142504, 143539, 158329, 168659, 168664, 168665, 216696];
    const LAST_MODEL_INT_FIELDS = ["artifactAppearanceMod", "artifactAppearanceMainHand", "artifactAppearanceOffHand"];
    const LAST_MODEL_POSITIVE_INT_FIELDS = ["class", "specialization", "level", "date"];
    const OFFHAND_ARMOR_OFFSET = 1e3;
    const OPTION_TYPE_SELECTION_POPOUT = 0;
    const OPTION_TYPE_CHECKBOX = 1;
    const OPTION_TYPE_SLIDER = 2;
    const OPTION_WRAPPER_CLASS = "dressing-room-character-controls-category-option";
    const OUTFIT_SLOT_NAMES = {
        [Wow.INVENTORY_SLOT_HEAD]: "head",
        [Wow.INVENTORY_SLOT_SHOULDERS]: "shoulder",
        [Wow.INVENTORY_SLOT_BACK]: "back",
        [Wow.INVENTORY_SLOT_CHEST]: "chest",
        [Wow.INVENTORY_SLOT_SHIRT]: "shirt",
        [Wow.INVENTORY_SLOT_TABARD]: "tabard",
        [Wow.INVENTORY_SLOT_WRISTS]: "wrist",
        [Wow.INVENTORY_SLOT_HANDS]: "hands",
        [Wow.INVENTORY_SLOT_WAIST]: "waist",
        [Wow.INVENTORY_SLOT_LEGS]: "legs",
        [Wow.INVENTORY_SLOT_FEET]: "feet",
        [Wow.INVENTORY_SLOT_MAIN_HAND]: "mainhand",
        [Wow.INVENTORY_SLOT_OFF_HAND]: "offhand"
    };
    const PAPERDOLL_ID = "dressing-room-paperdoll";
    const PAPERDOLL_SLOTS = {
        1: Wow.INVENTORY_SLOT_HEAD,
        2: Wow.INVENTORY_SLOT_SHOULDERS,
        3: Wow.INVENTORY_SLOT_BACK,
        4: Wow.INVENTORY_SLOT_CHEST,
        5: Wow.INVENTORY_SLOT_SHIRT,
        6: Wow.INVENTORY_SLOT_TABARD,
        7: Wow.INVENTORY_SLOT_WRISTS,
        8: Wow.INVENTORY_SLOT_HANDS,
        9: Wow.INVENTORY_SLOT_WAIST,
        10: Wow.INVENTORY_SLOT_LEGS,
        11: Wow.INVENTORY_SLOT_FEET,
        12: Wow.INVENTORY_SLOT_MAIN_HAND,
        13: Wow.INVENTORY_SLOT_OFF_HAND
    };
    const PEPE_OPTIONS = [{
        id: 0,
        name: WH.TERMS.none,
        class: "q0"
    }];
    const SLOT_MAIN_HAND = 12;
    const SLOT_OFF_HAND = 13;
    const SLOT_RANGED = 14;
    const SLOT_SHOULDER_2 = 14;
    const STATIC_DATA = {
        conditionalCategories: [],
        customizationCategories: {},
        customizationConversion: {},
        customizationOptions: {},
        customizationRequiredChoices: {},
        itemEnchants: {},
        itemSources: {},
        modelGenders: {},
        mountRaces: {},
        pepeNames: {},
        raceGenderMap: {}
    };
    const my = {
        animationMenu: [],
        animationMenuFlat: [],
        animationsLoaded: {},
        appearanceNeedsUpdate: false,
        category: DEFAULT_CATEGORY,
        character: {
            equipment: {},
            previousEquipment: undefined,
            settings: {}
        },
        characterLoader: null,
        charCust: undefined,
        customizations: {},
        dataLoaded: false,
        displayId: null,
        elements: {
            categoryControls: {
                animation: undefined,
                categories: {},
                categorySwitchers: {},
                categorySwitchersWrapper: undefined,
                npcOptions: undefined
            },
            character: undefined,
            characterLoader: undefined,
            expansionSelect: undefined,
            generalControls: undefined,
            importControl: undefined,
            loadingIndicator: undefined,
            pickerWarning: undefined,
            redo: undefined,
            separateShouldersCheckbox: undefined,
            summary: undefined,
            summaryHeading: undefined,
            undo: undefined,
            wrapper: undefined
        },
        forceReloadPaperdoll: false,
        hideUi: false,
        itemsRequested: {},
        lastCustomizationOption: null,
        lastSetName: null,
        otherRequirementTypesAllNpc: false,
        paperdoll: undefined,
        paperdollResponsiveShell: undefined,
        pauseButton: undefined,
        pendingSlotChanges: [],
        pickerListviews: [],
        pickerEquipSlot: undefined,
        pickerSearchSlot: undefined,
        pickerTabs: undefined,
        previousAnimation: undefined,
        previousSearch: {},
        summaryListview: undefined,
        toggleUiButton: undefined
    };
    this.decodingPostProcess = function(e) {
        e = $.extend(true, {}, CHARACTER_TEMPLATE, e);
        if (!WH.Wow.Models.isPepeEnabled()) {
            e.settings.pepe = 0
        }
        e.custChoices = e.custChoices || [];
        let t = {};
        for (let i, n = 0; i = e.custChoices[n]; n++) {
            t[i.optionId] = i.choiceId
        }
        delete e.custChoices;
        let i = Data.getCustomizationOptions(e.settings.race, e.settings.gender, e.settings["class"]);
        for (let n = 1; n <= 2; n++) {
            for (let r, o = 0; r = i[o]; o++) {
                let i = undefined;
                for (let o, s = 0; o = r.choices[s]; s++) {
                    if (n > 1 && !Data.custChoiceRequirementsMet(o, e.settings)) {
                        continue
                    }
                    if (i === undefined || o.id == t[r.id]) {
                        i = s
                    }
                }
                if (i !== undefined) {
                    e.settings[r.slug] = r.choices[i].id
                } else if (n > 1) {
                    delete e.settings[r.slug]
                }
            }
        }
        Data.updateLegacyCustomizationOptions(e.settings);
        if (e.artifactAppearanceMod) {
            e.artifactAppearanceMainHand = e.artifactAppearanceMod;
            e.artifactAppearanceOffHand = e.artifactAppearanceMod
        }
        return e
    }
    ;
    this.getCharacterForHash = function() {
        let e = WH.cO({}, my.character);
        e.custChoices = [];
        let t = Data.getCustomizationOptions(e.settings.race, e.settings.gender, e.settings["class"]);
        for (let i, n = 0; i = t[n]; n++) {
            e.custChoices.push({
                optionId: i.id,
                choiceId: e.settings[i.slug]
            })
        }
        for (let t = e.custChoices.length; t < CUSTOMIZATION_CHOICE_MAX; t++) {
            e.custChoices.push({
                optionId: 0,
                choiceId: 0
            })
        }
        return e
    }
    ;
    this.getHashTemplate = function(e) {
        return HASH_TEMPLATES[e] || HASH_TEMPLATES[HASH_VERSION]
    }
    ;
    this.getHashVersion = function() {
        return HASH_VERSION
    }
    ;
    this.getPrimaryRaceId = function(e) {
        e = e || my.character.settings.race;
        return {
            [Race.ID_DRACTHYR_VISAGE_ALLIANCE]: Race.ID_DRACTHYR_ALLIANCE,
            [Race.ID_DRACTHYR_VISAGE_HORDE]: Race.ID_DRACTHYR_HORDE
        }[e] || e
    }
    ;
    this.getTransmogRaceId = function(e) {
        e = e || my.character.settings.race;
        switch (e) {
        case Race.ID_PANDAREN_ALLIANCE:
        case Race.ID_PANDAREN_HORDE:
            return Race.ID_PANDAREN_NEUTRAL;
        case Race.ID_DRACTHYR_VISAGE_ALLIANCE:
        case Race.ID_DRACTHYR_VISAGE_HORDE:
            return Race.ID_HUMAN
        }
        return Race.isPlayableRace(e) ? e : Race.ID_HUMAN
    }
    ;
    this.init = function() {
        for (let e in STATIC_DATA) {
            if (STATIC_DATA.hasOwnProperty(e)) {
                STATIC_DATA[e] = WH.getPageData("wow.dressingRoom." + e)
            }
        }
        STATIC_DATA.customizationCategories[CATEGORY_GEAR] = {
            id: CATEGORY_GEAR,
            name: WH.TERMS.gear,
            slug: "gear"
        };
        STATIC_DATA.customizationCategories[CATEGORY_CHARACTER] = {
            id: CATEGORY_CHARACTER,
            name: WH.TERMS.character,
            slug: "character"
        };
        for (let e in STATIC_DATA.pepeNames) {
            if (STATIC_DATA.pepeNames.hasOwnProperty(e)) {
                PEPE_OPTIONS.push({
                    id: parseInt(e),
                    name: STATIC_DATA.pepeNames[e]
                })
            }
        }
        PEPE_OPTIONS.sort((function(e, t) {
            return e.id - t.id
        }
        ));
        my.charCust = new CharacterCustomization(STATIC_DATA.raceGenderMap,STATIC_DATA.customizationOptions,STATIC_DATA.customizationRequiredChoices,STATIC_DATA.conditionalCategories);
        my.category = LocalStorage.get(LocalStorage.KEY_WOW_DRESSING_ROOM_LAST_CATEGORY) || my.category;
        if (KIOSK_MODE) {
            document.body.dataset.kioskMode = KIOSK_MODE;
            if (KIOSK_MODE === KIOSK_MODE_GEAR) {
                my.category = CATEGORY_GEAR
            }
        }
        let e = WH.parseQueryString(location.search);
        if (e.animation) {
            CHARACTER_TEMPLATE.settings.animation = e.animation
        }
        my.elements.wrapper = WH.ge("dressing-room");
        my.elements.character = WH.ce("div", {
            className: "dressing-room-character"
        });
        WH.ae(my.elements.wrapper, my.elements.character);
        WH.ae(Display.paperdollContainer(), WH.ce("div", {
            className: "paperdoll-responsive-shell"
        }));
        WH.aE(document, "keydown", Action.onKeyDown);
        if (!Expansion.available(Expansion.MOP)) {
            PAPERDOLL_SLOTS[SLOT_RANGED] = WH.Wow.INVENTORY_SLOT_RANGED;
            OUTFIT_SLOT_NAMES[WH.Wow.INVENTORY_SLOT_RANGED] = "ranged"
        } else if (CAN_USE_SEPARATE_SHOULDERS) {
            PAPERDOLL_SLOTS[SLOT_SHOULDER_2] = Paperdoll.INVENTORY_SLOT_SHOULDER_2;
            OUTFIT_SLOT_NAMES[Paperdoll.INVENTORY_SLOT_SHOULDER_2] = "shoulder2"
        }
        WH.calc.init({
            calculator: this,
            hashTemplates: HASH_TEMPLATES,
            postInit: this.initDisplay.bind(this, location.hash.substr(1))
        });
        my.elements.characterLoader = WH.ce("div", {
            style: {
                display: "none"
            }
        });
        WH.aef(my.elements.wrapper, my.elements.characterLoader);
        my.characterLoader = CreateCharacterLoader({
            parent: my.elements.wrapper,
            resultDiv: my.elements.characterLoader,
            onLoadCharacter: Data.onCharacterLoading.bind(Data),
            resultFunc: Data.onCharacterLoaderSuccess.bind(Data),
            errorFunc: Data.onCharacterLoaderError.bind(Data),
            skipFirstShow: true,
            fields: ["appearance"]
        });
        my.characterLoader.allowCancel = true;
        my.characterLoader.Init();
        if (isMountRace()) {
            Action.onChangeCategory(STATIC_DATA.customizationCategories[CATEGORY_CHARACTER].id)
        }
    }
    ;
    this.initDisplay = function(e) {
        Display.generalControls();
        Display.characterSettings();
        if (e === "") {
            setTimeout((function() {
                let e = Data.getLastViewedModel(LocalStorage.KEY_WOW_DRESSING_ROOM_LAST_MODEL);
                let t = Data.getLastViewedModel(LocalStorage.KEY_WOW_MODEL_VIEWER_LAST_MODEL);
                let i = false;
                if (t) {
                    if (!e || t && t.settings && t.settings.date && t.settings.date > e.settings.date) {
                        e = t;
                        i = true
                    }
                }
                if (!e) {
                    let t = Race.getUnique();
                    let i = t[Math.floor(Math.random() * t.length)];
                    let n = Math.floor(Math.random() * 2);
                    n = Race.validateGender(i, Gender.tryFrom(n)).value;
                    if (WH.isClassicTree() || WH.isTbcTree() || WH.isWrathTree() || WH.isCataTree() || WH.isMistsTree()) {
                        e = {
                            equipment: {
                                2: {
                                    itemId: 4733,
                                    itemBonus: 0
                                },
                                4: {
                                    itemId: 7454,
                                    itemBonus: 0
                                },
                                8: {
                                    itemId: 7457,
                                    itemBonus: 0
                                },
                                9: {
                                    itemId: 7462,
                                    itemBonus: 0
                                },
                                10: {
                                    itemId: 7455,
                                    itemBonus: 0
                                },
                                11: {
                                    itemId: 7458,
                                    itemBonus: 0
                                }
                            },
                            settings: Data.getRandomAppearanceSettings(i, n, PC.WARRIOR)
                        }
                    } else {
                        e = {
                            equipment: {
                                2: {
                                    itemId: 117327,
                                    itemBonus: 0
                                },
                                4: {
                                    itemId: 117322,
                                    itemBonus: 0
                                },
                                7: {
                                    itemId: 117352,
                                    itemBonus: 0
                                },
                                8: {
                                    itemId: 117324,
                                    itemBonus: 0
                                },
                                9: {
                                    itemId: 117328,
                                    itemBonus: 0
                                },
                                10: {
                                    itemId: 117344,
                                    itemBonus: 0
                                },
                                11: {
                                    itemId: 117341,
                                    itemBonus: 0
                                }
                            },
                            settings: Data.getRandomAppearanceSettings(i, n, PC.WARRIOR)
                        }
                    }
                }
                if (!i) {
                    let t = Data.appearanceHistory.getLast();
                    if (t) {
                        for (let i in t) {
                            if (t.hasOwnProperty(i)) {
                                e.settings[i] = t[i]
                            }
                        }
                    }
                }
                Data.setCharacter(e);
                WH.calc.hash.check();
                Data.setLastViewedModel()
            }
            ), 1)
        }
    }
    ;
    this.setCharacterOptions = function(e) {
        my.appearanceNeedsUpdate = true;
        UpdateDisplay.charAppearance(e)
    }
    ;
    this.updateFromHash = function(e) {
        Data.updateCharacter(e)
    }
    ;
    function isMountRace() {
        return Data.isMountRace(my.character.settings.race)
    }
    const Display = new function() {
        this.addSlotEnchantPicker = function(e) {
            let t = Icon.getLink(e.icon);
            WH.aE(t, "mousedown", (function() {
                Action.openPicker.call(this, self.ENCHANT_SEARCH_TYPE, e.slotId)
            }
            ));
            WH.Tooltips.attachNonTouch(t, (function() {
                let t = null;
                for (let i in my.character.equipment) {
                    if (my.character.equipment.hasOwnProperty(i) && PAPERDOLL_SLOTS[i] === e.slotId) {
                        t = my.character.equipment[i];
                        break
                    }
                }
                if (!t || !t.enchant) {
                    return undefined
                }
                return STATIC_DATA.itemEnchants[t.enchant].name
            }
            ), "q", {
                noWrap: true
            })
        }
        ;
        this.categorySwitcher = function(e) {
            let t = WH.ce("a", {
                dataset: {
                    category: e.slug
                },
                href: "javascript:",
                ariaLabel: e.name,
                role: "button"
            });
            WH.aE(t, "click", Action.onChangeCategory.bind(undefined, e.id));
            WH.Tooltips.attachNonTouch(t, e.name, "q");
            WH.ae(my.elements.categoryControls.categorySwitchersWrapper, t);
            if (e.customizeIcon) {
                const i = `${WH.STATIC_URL}/images/wow/TextureAtlas/${WH.getDataEnvKey()}/`;
                t.dataset.iconInactive = `${i}${e.customizeIcon}${WH.WebP.getImageExtension()}`;
                t.dataset.iconActive = `${i}${e.customizeIconSelected}${WH.WebP.getImageExtension()}`;
                t.style.backgroundImage = `url("${t.dataset.iconInactive}")`;
                t.dataset.hasTexture = "yes";
                if (e.iconWithBorder) {
                    t.dataset.hasTexture = "crop"
                }
            }
            switch (e.id) {
            case CATEGORY_CHARACTER:
                let e = Race.getIcon(self.getPrimaryRaceId(), Gender.tryFrom(my.character.settings.gender));
                if (e) {
                    t.style.backgroundImage = "url(" + Icon.getIconUrl(e, Icon.LARGE) + ")";
                    t.dataset.hasTexture = "yes"
                }
                break;
            case CATEGORY_GEAR:
                let i = ARMOR_ICONS[my.character.settings["class"] ? PC.getPreferredArmorSubclass(my.character.settings["class"]) : null];
                if (i) {
                    t.style.backgroundImage = "url(" + Icon.getIconUrl(i, Icon.LARGE) + ")";
                    t.dataset.hasTexture = "yes"
                }
                break
            }
            my.elements.categoryControls.categorySwitchers[e.id] = t
        }
        ;
        this.characterCustomizationOption = function(e, t, i, n, r, o, s) {
            Data.configureInGameStyleMenuColumns(o);
            let a = WH.ce("div");
            switch (n) {
            case OPTION_TYPE_SELECTION_POPOUT:
                let c = Action.onClickPrevChoice.bind(null, a, s || o, t);
                let l = WH.ce("a", {
                    className: "btn fa fa-caret-left",
                    href: "javascript:"
                });
                WH.aE(l, "click", c);
                WH.ae(a, l);
                r.tabIndex = -1;
                WH.ae(a, r);
                let u = Action.onClickNextChoice.bind(null, a, s || o, t);
                let m = WH.ce("a", {
                    className: "btn fa fa-caret-right",
                    href: "javascript:"
                });
                WH.aE(m, "click", u);
                WH.ae(a, m);
                a.tabIndex = 0;
                WH.aE(a, "keydown", Action.onOptionKeyDown.bind(a, c, u));
                if (my.lastCustomizationOption === t) {
                    requestAnimationFrame((function() {
                        a.focus()
                    }
                    ))
                }
                break;
            case OPTION_TYPE_CHECKBOX:
                let d = WH.ce("input", {
                    type: "checkbox",
                    ariaLabel: i
                });
                WH.ae(a, d);
                let p = o[0];
                let g = o[1];
                d.checked = my.character.settings[t] === g[Menu.ITEM_CRUMB];
                WH.aE(d, "click", function(e, i) {
                    let n = this.checked ? e : i;
                    Action.onChangeAppearance(t, n, undefined, true)
                }
                .bind(d, g, p));
                break;
            default:
                WH.error("Unsupported customization option type.", n, t, i, e);
                return
            }
            Display.customizationOption(e, t, i, a)
        }
        ;
        this.characterSettings = function() {
            let i = my.elements.categoryControls.categories;
            if (i[CATEGORY_CHARACTER]) {
                for (let e in i) {
                    if (i.hasOwnProperty(e)) {
                        WH.de(i[e]);
                        delete i[e]
                    }
                }
                let e = my.elements.categoryControls.categorySwitchers;
                for (let t in e) {
                    if (e.hasOwnProperty(t)) {
                        WH.de(e[t]);
                        delete e[t]
                    }
                }
            }
            Display.categorySwitcher(STATIC_DATA.customizationCategories[CATEGORY_GEAR]);
            let n = [];
            let r = DOM.createImitationSelect({
                menu: n
            });
            e(n, r);
            Display.characterCustomizationOption(CATEGORY_CHARACTER, "race", WH.TERMS.race, OPTION_TYPE_SELECTION_POPOUT, r, n);
            let o = [];
            let s = DOM.createImitationSelect({
                menu: o
            });
            PC.getAll().forEach((e => {
                const i = Menu.createItem({
                    crumb: e,
                    label: PC.getName(e),
                    options: {
                        className: (e => t(e, self.getPrimaryRaceId()) ? PC.getHtmlClass(e) : "q0").bind(null, e),
                        tinyIcon: (e => t(e, self.getPrimaryRaceId()) ? PC.getIconName(e) : undefined).bind(null, e),
                        checkedFunc: e => e[0] === my.character.settings["class"]
                    }
                });
                i[Menu.ITEM_URL] = Action.onChangeAppearance.bind(null, "class", i, s, true);
                o.push(i);
                if (my.character.settings["class"] === i[Menu.ITEM_CRUMB]) {
                    WH.st(s, i[Menu.ITEM_LABEL])
                }
            }
            ));
            Display.characterCustomizationOption(CATEGORY_CHARACTER, "class", WH.TERMS["class"], OPTION_TYPE_SELECTION_POPOUT, s, o);
            let a = [];
            let c = DOM.createImitationSelect({
                menu: a
            });
            [Gender.Male, Gender.Female].forEach((e => {
                let t = Menu.createItem({
                    crumb: e.value,
                    label: e.getName()
                });
                t[Menu.ITEM_URL] = Action.onChangeAppearance.bind(null, "gender", t, c, true);
                t.checked = my.character.settings.gender === e.value;
                a.push(t);
                if (my.character.settings.gender === e.value) {
                    WH.st(c, e.getName())
                }
            }
            ));
            Display.characterCustomizationOption(CATEGORY_CHARACTER, "gender", WH.TERMS.gender, OPTION_TYPE_SELECTION_POPOUT, c, a);
            let l = LocalStorage.get(LocalStorage.KEY_WOW_MODEL_VIEWER_SHEATHED) === true;
            let u = [];
            let m = DOM.createImitationSelect({
                menu: u
            });
            [{
                state: false,
                name: WH.TERMS.unsheathed
            }, {
                state: true,
                name: WH.TERMS.sheathed
            }].forEach((function(e) {
                let t = Menu.createItem({
                    crumb: e.state,
                    label: e.name,
                    url: function(e) {
                        my.paperdoll.sheathed = e.state;
                        my.character.settings.sheathed = e.state;
                        LocalStorage.set(LocalStorage.KEY_WOW_MODEL_VIEWER_SHEATHED, !!e.state);
                        WH.st(m, e.name);
                        my.lastCustomizationOption = "sheathed";
                        my.appearanceNeedsUpdate = true;
                        Data.updateCharacter(my.character)
                    }
                    .bind(null, e)
                });
                t.checked = l === e.state;
                u.push(t);
                if (l === e.state) {
                    my.character.settings.sheathed = e.state;
                    if (my.paperdoll) {
                        my.paperdoll.sheathed = e.state
                    }
                    WH.st(m, e.name)
                }
            }
            ));
            Display.characterCustomizationOption(CATEGORY_CHARACTER, "sheathed", WH.TERMS.weapons, OPTION_TYPE_SELECTION_POPOUT, m, u);
            if (WH.Wow.Models.isPepeEnabled()) {
                let e = [];
                let t = DOM.createImitationSelect({
                    menu: e
                });
                for (let i = 0, n; n = PEPE_OPTIONS[i]; i++) {
                    let i = {
                        crumb: n.id,
                        label: n.name,
                        url: function(e) {
                            my.character.settings.pepe = isNaN(e) ? 0 : e;
                            let i = WH.TERMS.unknown;
                            if (my.character.settings && my.character.settings.pepe !== 0) {
                                for (let e = 0, t; t = PEPE_OPTIONS[e]; e++) {
                                    if (t.id === my.character.settings.pepe) {
                                        i = t.name;
                                        break
                                    }
                                }
                            }
                            WH.st(t, i);
                            my.lastCustomizationOption = "pepe";
                            Data.updateCharacter(my.character, true)
                        }
                        .bind(null, n.id),
                        options: {
                            checkedFunc: function(e, t) {
                                return e[0] === my.character.settings.pepe
                            },
                            className: n["class"],
                            tinyIcon: n.id ? "ability_garrison_orangebird" : undefined
                        }
                    };
                    e.push(Menu.createItem(i));
                    if (my.character.settings.pepe === n.id) {
                        WH.st(t, n.name)
                    }
                }
                Display.characterCustomizationOption(CATEGORY_CHARACTER, "pepe", STATIC_DATA.pepeNames[1], OPTION_TYPE_SELECTION_POPOUT, t, e)
            }
            let d = DOM.createImitationSelect({
                menu: my.animationMenu
            });
            Display.characterCustomizationOption(CATEGORY_CHARACTER, "animation", WH.TERMS.animation, OPTION_TYPE_SELECTION_POPOUT, d, my.animationMenu, my.animationMenuFlat);
            my.elements.categoryControls.animation = d;
            if (my.animationsLoaded["class"] === my.character.settings["class"] && my.animationsLoaded.race === my.character.settings.race) {
                WH.st(d, my.character.settings.animation)
            } else {
                my.animationMenu.length = 0;
                d.parentNode.dataset.disabled = "true"
            }
            let p = WH.ce("label", {
                htmlFor: "npc-options",
                onmousedown: WH.rf
            }, WH.ct(WH.TERMS.npcOptions));
            WH.Tooltips.attachNonTouch(p, WH.TERMS.includeNpcOnlyOptions_stc);
            if (my.otherRequirementTypesAllNpc) {
                p.classList.add("q5")
            }
            let g = WH.ce("input", {
                type: "checkbox",
                name: "npc-options",
                id: "npc-options"
            });
            WH.aE(g, "change", Action.toggleNpcOptions);
            let y = WH.ce("div", undefined, g);
            my.elements.categoryControls.npcOptions = y;
            Display.customizationOption(CATEGORY_CHARACTER, "npc-options", p, y)
        }
        ;
        this.createColorSwatch = function(e) {
            return WH.ce("span", {
                className: COLOR_SWATCHES_CLASS + "-swatch",
                style: {
                    backgroundColor: "#" + (e || "FF00FF")
                }
            })
        }
        ;
        this.customizationOption = function(e, t, i, n) {
            let r = my.elements.categoryControls.categories[e];
            if (!r) {
                let t = STATIC_DATA.customizationCategories[e] || {
                    id: e,
                    name: WH.term("unknownEntityName_format", WH.TERMS.category, e),
                    slug: "category-" + e
                };
                Display.categorySwitcher(t);
                r = WH.ce("div", {
                    className: "dressing-room-character-controls-category",
                    dataset: {
                        category: t.slug
                    }
                }, WH.getMajorHeading(t.name, 2));
                my.elements.categoryControls.categorySwitchersWrapper.after(r);
                my.elements.categoryControls.categories[t.id] = r
            }
            let o = i instanceof Node ? i : WH.ct(i);
            let s = WH.ce("div", {
                dataset: {
                    role: "label"
                }
            }, o);
            n.dataset.role = "control";
            let a = WH.ce("div", {
                className: OPTION_WRAPPER_CLASS,
                dataset: {
                    characterCustomizationType: t
                }
            });
            WH.ae(a, s);
            WH.ae(a, n);
            WH.ae(r, a)
        }
        ;
        this.generalControls = function() {
            if (my.elements.generalControls) {
                return
            }
            const e = WH.ce("div", {
                className: "wh-toolbar dressing-room-character-controls-general",
                dataset: {
                    mode: "footer"
                }
            });
            const t = WH.ae(e, WH.ce("div", {
                className: "wh-toolbar-header"
            }));
            my.elements.generalControls = WH.ae(t, WH.ce("div", {
                className: "wh-button-group",
                dataset: {
                    alignment: "center"
                }
            }));
            my.elements.categoryControls.categorySwitchersWrapper = WH.ce("div", {
                className: "dressing-room-character-controls-category-switchers"
            });
            if (WH.User.hasCapability(WH.User.CAP_TRANSMOG_SET_EDIT)) {
                const e = new WH.Button({
                    "data-simple-tooltip": "Save Outfit/Transmog Set.",
                    "data-variation": WH.getDataTreeKey(),
                    iconConfig: {
                        faIcon: {
                            prefix: "fas",
                            name: "floppy-disk"
                        }
                    },
                    label: WH.TERMS.save,
                    style: "hybrid"
                }).getElement();
                Menu.add(e, [Menu.createItem({
                    label: "Save Outfit",
                    url: Action.onClickSave
                }), Menu.createItem({
                    label: "Save Transmog Set",
                    url: Action.onClickTransmog
                })], {
                    showAtElement: true
                });
                WH.ae(my.elements.generalControls, e)
            } else {
                WH.ae(my.elements.generalControls, new WH.Button({
                    "data-simple-tooltip": WH.TERMS.saveAsOutfit_tip,
                    "data-variation": WH.getDataTreeKey(),
                    clickHandler: Action.onClickSave,
                    iconConfig: {
                        faIcon: {
                            prefix: "fas",
                            name: "floppy-disk"
                        }
                    },
                    id: "dr-save",
                    label: WH.TERMS.save,
                    style: "hybrid"
                }).getElement())
            }
            if (WH.isRetailTree()) {
                my.elements.importControl = new WH.Button({
                    "data-simple-tooltip": WH.TERMS.loadCharacterAppearance_tip,
                    "data-variation": WH.getDataTreeKey(),
                    clickHandler: (e, t) => Action.onClickImport(t),
                    iconConfig: {
                        faIcon: {
                            prefix: "fas",
                            name: "users"
                        }
                    },
                    id: "dr-users",
                    label: WH.TERMS.import,
                    style: "hybrid"
                }).getElement();
                WH.ae(my.elements.generalControls, my.elements.importControl)
            }
            const i = new WH.Button({
                "data-simple-tooltip": WH.TERMS.resetModelPositionOrRemoveAllGear_tip,
                "data-variation": WH.getDataTreeKey(),
                iconConfig: {
                    faIcon: {
                        prefix: "fas",
                        name: "xmark"
                    }
                },
                id: "dr-reset",
                label: WH.TERMS.reset,
                style: "hybrid"
            }).getElement();
            Menu.add(i, [Menu.createItem({
                label: WH.TERMS.removeCurrentGear,
                url: function() {
                    Data.clearAllSlots();
                    Data.updateCharacter(my.character)
                }
            }), Menu.createItem({
                label: WH.TERMS.resetModelPosition,
                url: Action.resetModelPosition
            })], {
                showAtElement: true
            });
            WH.ae(my.elements.generalControls, i);
            WH.ae(my.elements.generalControls, new WH.Button({
                "data-simple-tooltip": Expansion.available(Expansion.CATA) ? WH.TERMS.equipATransmogSet_tip : WH.TERMS.equipAnItemAppearanceSet_tip,
                "data-variation": WH.getDataTreeKey(),
                clickHandler: () => Action.openPicker(WH.Types.TRANSMOG_SET),
                iconConfig: {
                    faIcon: {
                        prefix: "fas",
                        name: "plus"
                    }
                },
                id: "dr-transmog-set",
                label: KIOSK_MODE === KIOSK_MODE_TEKNISK ? WH.TERMS.equip : Expansion.available(Expansion.CATA) ? WH.TERMS.transmog.length > 8 ? WH.TERMS.transmog_abbrev : WH.TERMS.transmog : WH.TERMS.sets,
                style: "hybrid"
            }).getElement());
            const n = my.toggleUiButton = new WH.Button({
                "data-variation": WH.getDataTreeKey(),
                clickHandler: Action.toggleUi,
                iconConfig: {
                    faIcon: {
                        prefix: "fas",
                        name: "eye-slash"
                    }
                },
                id: "dr-toggle-ui",
                label: WH.TERMS.hideUi,
                style: "hybrid"
            });
            WH.ae(my.elements.generalControls, n.getElement());
            const r = WH.ce("div", {}, WH.ct(WH.TERMS.toggleModelUi_tip));
            WH.ae(r, WH.ce("div", {}, WH.ct("ALT-Z")));
            WH.Tooltips.attachNonTouch(n.getElement(), r);
            const o = new WH.Button({
                "data-simple-tooltip": WH.TERMS.linkAppearance_tip,
                "data-variation": WH.getDataTreeKey(),
                iconConfig: {
                    faIcon: {
                        prefix: "fas",
                        name: "link"
                    }
                },
                id: "dr-links",
                label: WH.TERMS.links,
                style: "hybrid"
            }).getElement();
            WH.ae(my.elements.generalControls, o);
            let s = [Menu.createHeading({
                label: WH.TERMS.clickToCopy
            }), Menu.createItem({
                label: WH.TERMS.linkToThisPage,
                url: e => WH.copyToClipboard(location.href, e),
                options: {
                    fontIcon: "clipboard"
                }
            }), Menu.createItem({
                label: WH.TERMS.inGameDressingRoomCommand,
                url: e => {
                    let t = t => WH.copyToClipboard(t, e);
                    Wow.hasVersion(90105) ? Data.getOutfitInGameLink(t, true) : Data.getLegacyInGameLink(t)
                }
                ,
                options: {
                    fontIcon: "clipboard"
                }
            })];
            if (Wow.hasVersion(90105)) {
                s.push(Menu.createItem({
                    label: WH.TERMS.inGameLink,
                    url: e => {
                        Data.getOutfitInGameLink((t => WH.copyToClipboard(t, e)), false)
                    }
                    ,
                    options: {
                        fontIcon: "clipboard"
                    }
                }))
            }
            Menu.add(o, s, {
                showAtElement: true
            });
            WH.ae(my.elements.generalControls, new WH.Button({
                "data-simple-tooltip": WH.TERMS.screenshotAppearance_tip,
                "data-variation": WH.getDataTreeKey(),
                clickHandler: function() {
                    let e = [];
                    e.push([Race.getName(my.character.settings.race), Gender.from(my.character.settings.gender).getName(), PC.getName(my.character.settings["class"])].join(WH.TERMS.wordspace_punct));
                    if (my.lastSetName) {
                        e.push(my.lastSetName)
                    }
                    e.push("Wowhead" + WH.TERMS.wordspace_punct + WH.TERMS.dressingroom);
                    ModelViewer.grabScreenshot(my.paperdoll.viewer, e.join(" - "))
                },
                iconConfig: {
                    faIcon: {
                        prefix: "fas",
                        name: "camera"
                    }
                },
                id: "dr-screenshot",
                label: WH.TERMS.screenshot,
                style: "hybrid"
            }).getElement());
            const a = my.pauseButton = new WH.Button({
                "data-variation": WH.getDataTreeKey(),
                clickHandler: Action.togglePause,
                iconConfig: {
                    faIcon: {
                        prefix: "fas",
                        name: "pause"
                    }
                },
                id: "dr-pause",
                label: WH.TERMS.pause,
                style: "hybrid"
            });
            const c = WH.ce("div", {}, WH.ct(WH.TERMS.pauseCharAnimations_tip));
            WH.ae(c, WH.ce("div", {}, WH.ct("CTRL-P")));
            WH.Tooltips.attachNonTouch(a.getElement(), c);
            WH.ae(my.elements.generalControls, a.getElement());
            let l = WH.ce("div", {
                className: "wh-button-group",
                dataset: {
                    grow: false
                }
            });
            WH.ae(my.elements.generalControls, l);
            WH.ae(l, new WH.Button({
                "data-simple-tooltip": WH.TERMS.randomCharCustomization_tip,
                "data-variation": WH.getDataTreeKey(),
                clickHandler: Action.randomizeAppearance,
                iconConfig: {
                    faIcon: {
                        prefix: "fas",
                        name: "random"
                    }
                },
                id: "dr-randomize",
                label: WH.TERMS.random,
                style: "hybrid"
            }).getElement());
            my.elements.undo = new WH.Button({
                "data-variation": WH.getDataTreeKey(),
                clickHandler: Action.appearanceUndo,
                disabled: true,
                iconConfig: {
                    faIcon: {
                        prefix: "fas",
                        name: "undo"
                    }
                },
                id: "dr-undo",
                label: WH.TERMS.undo,
                style: "hybrid"
            }).getElement();
            const u = WH.ce("div", {}, WH.ct(WH.TERMS.undoCharCustomization_tip));
            WH.ae(u, WH.ce("div", {}, WH.ct("CTRL-Z")));
            WH.Tooltips.attachNonTouch(my.elements.undo, u);
            WH.ae(l, my.elements.undo);
            my.elements.redo = new WH.Button({
                "data-variation": WH.getDataTreeKey(),
                disabled: true,
                clickHandler: Action.appearanceRedo,
                iconConfig: {
                    faIcon: {
                        prefix: "fas",
                        name: "repeat"
                    }
                },
                id: "dr-redo",
                label: WH.TERMS.redo,
                style: "hybrid"
            }).getElement();
            WH.ae(l, my.elements.redo);
            const m = WH.ce("div", {}, WH.ct(WH.TERMS.redoCharCustomization_tip));
            WH.ae(m, WH.ce("div", {}, WH.ct(Locale.formatList(["CTRL-SHIFT-Z", "CTRL-Y"], "or"))));
            WH.Tooltips.attachNonTouch(my.elements.redo, m);
            WH.ae(l, my.elements.redo);
            WH.ae(my.elements.character, my.elements.categoryControls.categorySwitchersWrapper);
            WH.ae(my.elements.character, e)
        }
        ;
        this.getTooltip = function(e, t, i) {
            let n = WH.ce("div", {
                style: {
                    maxWidth: "200px"
                }
            }, WH.ct(e));
            if (i) {
                n.classList.add(i)
            }
            if (t) {
                WH.ae(n, WH.ce("br"));
                WH.ae(n, WH.ce("span", {
                    className: "q"
                }, WH.ct(WH.TERMS.hotkey + WH.TERMS.colon_punct + t)))
            }
            return n
        }
        ;
        this.paperdoll = function() {
            Data.setForceReloadPaperdoll(false);
            let e = Display.paperdollContainer();
            if (my.character.settings.animation) {
                my.previousAnimation = my.character.settings.animation
            }
            my.character.settings.animation = ModelViewer.ANIMATION_CHARACTER_CREATE;
            my.animationMenu.length = 0;
            my.animationMenuFlat.length = 0;
            WH.st(my.elements.categoryControls.animation, "");
            my.elements.categoryControls.animation.parentNode.dataset.disabled = "true";
            let t = Data.getPaperdollModelOptions();
            let i = {
                animationControlHandler: UpdateDisplay.animationControl,
                container: e,
                iconSize: Icon.LARGE,
                id: PAPERDOLL_ID,
                modelWheelEventValidation: Action.validateModelWheelEvent,
                offset: t.offset,
                resizable: true,
                canUseSeparateShoulders: CAN_USE_SEPARATE_SHOULDERS,
                separateShoulders: CAN_USE_SEPARATE_SHOULDERS && !!my.character.settings.separateShoulders,
                zoom: t.zoom
            };
            if (my.displayId) {
                i.displayId = my.displayId
            } else {
                WH.cO(i, Data.getCharacterForPaperdoll());
                i.data = Data.getEquipmentForPaperdoll();
                i.onChangeMount = Data.setMount.bind(this);
                i.onCreateEnchantSlot = Display.addSlotEnchantPicker.bind(this);
                i.onCreateSlot = Display.slotMenu.bind(this);
                i.pepe = WH.Wow.Models.isPepeEnabled() ? my.character.settings.pepe : 0;
                i.hideSlots = [Wow.INVENTORY_SLOT_NECK, Wow.INVENTORY_SLOT_FINGER_1, Wow.INVENTORY_SLOT_FINGER_2, Wow.INVENTORY_SLOT_TRINKET_1, Wow.INVENTORY_SLOT_TRINKET_2]
            }
            if (KIOSK_MODE) {
                let e = WH.getGets();
                if (e.hasOwnProperty("teamLiquidModel") || e.hasOwnProperty("teamLiquidGear")) {
                    i.background = "team-liquid-rwf.jpg"
                }
            }
            my.paperdoll = new Paperdoll(i);
            my.paperdollResponsiveShell = WH.qs(".paperdoll-responsive-shell", my.paperdoll.container);
            if (CAN_USE_SEPARATE_SHOULDERS) {
                let e = WH.ce("input", {
                    checked: !!my.character.settings.separateShoulders,
                    type: "checkbox",
                    ariaLabel: WH.GlobalStrings.TRANSMOGRIFY_RIGHT_SHOULDER
                });
                WH.aE(e, "change", (function() {
                    WH.Tooltips.hide();
                    my.character.settings.separateShoulders = this.checked ? 1 : 0;
                    my.paperdoll.setSeparateShoulders(this.checked);
                    WH.calc.hash.update()
                }
                ));
                WH.Tooltips.attachNonTouch(e, (function() {
                    let e = WH.ce("div", {
                        className: "q",
                        style: {
                            width: "125px"
                        }
                    }, WH.ct(WH.GlobalStrings.TRANSMOGRIFY_RIGHT_SHOULDER));
                    return e.outerHTML
                }
                ));
                WH.ae(WH.qs('.iconlarge[data-character-slot="3"]', my.paperdoll.container), e);
                my.elements.separateShouldersCheckbox = e
            }
            if (KIOSK_MODE) {
                let e = my.elements.generalControls.offsetHeight;
                let t = getComputedStyle(my.paperdollResponsiveShell);
                let i = parseInt(t.getPropertyValue("padding-bottom"));
                let n = parseInt(t.getPropertyValue("padding-top"));
                let r = null;
                let o = null;
                let s = function() {
                    const t = 620;
                    const s = 990;
                    let a = false;
                    let c = window.innerHeight;
                    if (r !== null && c <= r) {
                        document.body.dataset.kioskModeFillScreen = "false";
                        a = true
                    } else if (o !== null && c >= o) {
                        document.body.dataset.kioskModeFillScreen = "true";
                        a = true
                    } else {
                        document.body.dataset.kioskModeFillScreen = "true"
                    }
                    let l = Math.min(Math.max(my.elements.wrapper.offsetHeight - e, t), s);
                    if (!a) {
                        let e = l > t;
                        document.body.dataset.kioskModeFillScreen = JSON.stringify(e);
                        if (e) {
                            o = o === null ? c : Math.min(c, o)
                        } else {
                            r = r === null ? c : Math.max(c, r)
                        }
                    }
                    my.paperdollResponsiveShell.style.maxWidth = Math.ceil((l - i - n) / Paperdoll.CHARACTER_RATIO) + "px"
                };
                WH.aE(window, "resize", s);
                s()
            }
            if (my.pauseButton.getElement().dataset.paused === "true") {
                setTimeout(UpdateDisplay.setViewerPause.bind(this, true), 1e3)
            }
        }
        ;
        this.paperdollContainer = function() {
            WH.de(".paperdoll", my.elements.character);
            let e = WH.ce("div", {
                className: "paperdoll",
                id: PAPERDOLL_ID,
                style: {
                    backgroundImage: "url(" + ModelViewer.getBackgroundUrl() + ")"
                }
            });
            WH.aef(my.elements.character, e);
            return e
        }
        ;
        this.picker = function(e, t, i) {
            Lightbox.setSize(800);
            my.pickerListviews = [];
            if (t) {
                let t = WH.ce("div");
                t.className = "dressing-room-picker-tabs";
                WH.ae(e, t);
                my.pickerTabs = new Tabs({
                    parent: t,
                    poundable: 0,
                    onShow: Action.onChangePickerTab.bind(this, e)
                });
                my.elements.pickerWarning = WH.ce("div");
                my.elements.pickerWarning.className = "dressing-room-picker-warningmsg";
                my.elements.pickerWarning.style.display = "none";
                let i = WH.ce("i");
                i.className = "fa fa-exclamation-triangle";
                WH.ae(my.elements.pickerWarning, i);
                WH.ae(my.elements.pickerWarning, WH.ct(" " + WH.TERMS.searchfilter_tip));
                WH.ae(e, my.elements.pickerWarning);
                e.className += " dressing-room-picker";
                let n = WH.ce("div");
                let r = WH.ce("div");
                n.id = "tab-picker";
                r.id = "tab-pickergallery";
                n.className = r.className = "lightbox-content listview";
                WH.ae(e, n);
                WH.ae(e, r);
                let o = WH.ce("a");
                o.className = "dialog-option fa fa-times";
                o.href = "javascript:";
                o.onclick = Lightbox.hide;
                WH.ae(o, WH.ct(WH.TERMS.close));
                WH.ae(e, o);
                let s = function(e) {
                    e.innerHTML = this.noteTopFormIsEmpty && this.noteTopFormIsEmpty() ? WH.TERMS.beginsearchingabove_tip : WH.TERMS.nomatches_tip
                };
                my.pickerListviews.push(new Listview({
                    template: "pickergallery",
                    containVerticalScrolling: true,
                    createNote: Display.pickerNote.bind(this),
                    customFilter: Data.isValidPickerData.bind(this),
                    data: [],
                    gender: my.character.settings.gender,
                    hideCount: 1,
                    id: "pickergallery",
                    name: WH.TERMS.gallery,
                    onNoData: s,
                    race: self.getTransmogRaceId(),
                    selectData: Action.selectPickerData.bind(this),
                    tabs: my.pickerTabs
                }));
                my.pickerListviews.push(new Listview({
                    template: "picker",
                    containVerticalScrolling: true,
                    createNote: Display.pickerNote.bind(this),
                    customFilter: Data.isValidPickerData.bind(this),
                    data: [],
                    hiddenCols: ["source", "slot"],
                    hideCount: 1,
                    id: "picker",
                    name: WH.TERMS.text,
                    onNoData: s,
                    selectData: Action.selectPickerData.bind(this),
                    tabs: my.pickerTabs
                }));
                my.pickerTabs.flush()
            } else {
                my.pickerListviews[0] = g_listviews["pickergallery"];
                my.pickerListviews[1] = g_listviews["picker"]
            }
            if (my.searchType === WH.Types.ITEM_SET) {
                my.pickerTabs.selectedTab = 0;
                my.pickerTabs.hide(0, false)
            } else {
                if (my.pickerTabs.tabs[0].hidden) {
                    my.pickerTabs.tabs[0].hidden = false;
                    my.pickerTabs.flush()
                }
            }
            let n = false;
            if (my.pickerListviews[0].race != self.getTransmogRaceId()) {
                my.pickerListviews[0].race = self.getTransmogRaceId();
                n = true
            }
            if (my.pickerListviews[0].gender != my.character.settings.gender) {
                my.pickerListviews[0].gender = my.character.settings.gender;
                n = true
            }
            if (n) {
                my.pickerListviews[0].refreshRows(true)
            }
            my.pickerListviews[1].searchable = my.searchType === self.ENCHANT_SEARCH_TYPE ? 1 : 0;
            UpdateDisplay.filters(my.pickerListviews[1]);
            $(".picker-search", $("#tab-picker")).val("");
            $(".picker-search", $("#tab-pickergallery")).val("");
            Action.onKeyUpItemSearch(0);
            if (my.searchType === self.ENCHANT_SEARCH_TYPE) {
                Display.populateEnchantsListview();
                if (my.searchTimer) {
                    window.clearTimeout(my.searchTimer);
                    delete my.searchTimer
                }
                my.previousSearch = my.previousSearch || {};
                my.previousSearch.searchType = self.ENCHANT_SEARCH_TYPE;
                $(my.elements.pickerWarning).hide()
            } else {
                setTimeout((function() {
                    WH.safeFocus($("input:visible", e))
                }
                ), 10)
            }
        }
        ;
        this.pickerNote = function(e) {
            let t = WH.ce("div");
            t.className = "dressing-room-picker-filter filter-name";
            WH.ae(t, WH.ct(WH.TERMS.name_colon));
            let i = WH.ce("input");
            i.className = "picker-search";
            i.type = "text";
            WH.aE(i, "keyup", Action.onKeyUpItemSearch.bind(this));
            WH.aE(i, "keydown", Action.onKeyDownItemSearch.bind(this));
            WH.ae(t, i);
            WH.ae(e, t);
            let n = WH.ce("div");
            n.className = "dressing-room-picker-filter filter-armortype";
            n.style.display = "none";
            WH.ae(n, WH.ct(WH.TERMS.type + ": "));
            let r = WH.ce("select");
            r.onchange = Action.onChangeFilter.bind(this);
            WH.ae(n, r);
            let o = WH.ce("option");
            WH.ae(r, o);
            Item.getArmorSubclasses().forEach((function(e) {
                WH.ae(r, WH.ce("option", {
                    value: e
                }, WH.ct(Item.getClassName(Item.CLASS_ARMOR, e))))
            }
            ));
            WH.ae(e, n);
            let s = Expansion.available(Expansion.MOP);
            let a = [];
            let c = [];
            let l = [];
            Item.getWeaponSubclasses().forEach((function(e) {
                let t = {
                    id: e,
                    name: Item.getClassName(Item.CLASS_WEAPON, e)
                };
                if (s || !Item.isRangedWeaponSubclass(e)) {
                    a.push(t);
                    c.push(t)
                }
                if (Item.isRangedWeaponSubclass(e)) {
                    l.push(t)
                }
            }
            ));
            c.push({
                id: Item.ARMOR_SUBCLASS_OFF_HAND_FRILLS + OFFHAND_ARMOR_OFFSET,
                name: Item.getClassName(Item.CLASS_ARMOR, Item.ARMOR_SUBCLASS_OFF_HAND_FRILLS)
            });
            c.push({
                id: Item.ARMOR_SUBCLASS_SHIELDS + OFFHAND_ARMOR_OFFSET,
                name: Item.getClassName(Item.CLASS_ARMOR, Item.ARMOR_SUBCLASS_SHIELDS)
            });
            let u = function(e, t) {
                return WH.stringCompare(e.name, t.name)
            };
            a.sort(u);
            c.sort(u);
            l.sort(u);
            let m = WH.ce("div");
            m.className = "dressing-room-picker-filter filter-mainhandtype";
            m.style.display = "none";
            WH.ae(m, WH.ct(WH.TERMS.type + ": "));
            let d = WH.ce("select");
            d.onchange = Action.onChangeFilter.bind(this);
            WH.ae(m, d);
            let p = WH.ce("option");
            WH.ae(d, p);
            a.forEach((function(e) {
                WH.ae(d, WH.ce("option", {
                    value: e.id
                }, WH.ct(e.name)))
            }
            ));
            WH.ae(e, m);
            let g = WH.ce("div");
            g.className = "dressing-room-picker-filter filter-offhandtype";
            g.style.display = "none";
            WH.ae(g, WH.ct(WH.TERMS.type + ": "));
            let y = WH.ce("select");
            y.onchange = Action.onChangeFilter.bind(this);
            WH.ae(g, y);
            let h = WH.ce("option");
            WH.ae(y, h);
            c.forEach((function(e) {
                WH.ae(y, WH.ce("option", {
                    value: e.id
                }, WH.ct(e.name)))
            }
            ));
            WH.ae(e, g);
            let L = WH.ce("div");
            L.className = "dressing-room-picker-filter filter-rangedtype";
            L.style.display = "none";
            WH.ae(L, WH.ct(WH.TERMS.type + ": "));
            let f = WH.ce("select");
            f.onchange = Action.onChangeFilter.bind(this);
            WH.ae(L, f);
            let I = WH.ce("option");
            WH.ae(f, I);
            l.forEach((function(e) {
                WH.ae(f, WH.ce("option", {
                    value: e.id
                }, WH.ct(e.name)))
            }
            ));
            WH.ae(e, L);
            let T = WH.ce("div");
            T.className = "dressing-room-picker-filter filter-source";
            T.style.display = "none";
            WH.ae(T, WH.ct(WH.TERMS.source + ": "));
            f = WH.ce("select");
            f.onchange = Action.onChangeFilter.bind(this);
            WH.ae(T, f);
            I = WH.ce("option");
            WH.ae(f, I);
            for (let e in STATIC_DATA.itemSources) {
                if (!STATIC_DATA.itemSources.hasOwnProperty(e)) {
                    continue
                }
                I = WH.ce("option");
                I.value = e;
                WH.st(I, STATIC_DATA.itemSources[e]);
                WH.ae(f, I)
            }
            WH.ae(e, T);
            let k = WH.ce("div");
            k.className = "dressing-room-picker-filter filter-style";
            k.style.display = "none";
            WH.ae(k, WH.ct(WH.TERMS.style + ": "));
            f = WH.ce("select");
            f.onchange = Action.onChangeFilter.bind(this);
            WH.ae(k, f);
            I = WH.ce("option");
            WH.ae(f, I);
            Object.entries(WH.getPageData("wow.transmogSet.styleNames")).forEach(( ([e,t]) => {
                I = WH.ce("option");
                I.value = e;
                WH.st(I, t);
                WH.ae(f, I)
            }
            ));
            WH.ae(e, k);
            let S = Expansion.getAllAvailable();
            if (S.length > 1) {
                let t = WH.ce("div", {
                    className: "dressing-room-picker-filter filter-expansion",
                    style: {
                        display: "none"
                    }
                }, WH.ct(WH.TERMS.expansion + WH.TERMS.colon_punct));
                let i = WH.ce("select");
                WH.aE(i, "change", Action.onChangeFilter);
                WH.ae(t, i);
                my.elements.expansionSelect = i;
                WH.ae(i, WH.ce("option"));
                S.forEach((function(e) {
                    WH.ae(i, WH.ce("option", {
                        value: e
                    }, WH.ct(Expansion.getShortName(e))))
                }
                ));
                WH.ae(e, t)
            }
            my.elements.loadingIndicator = WH.ce("span", {
                className: "fa fa-circle-o-notch fa-spin",
                style: {
                    display: "none"
                }
            });
            WH.ae(e, my.elements.loadingIndicator)
        }
        ;
        this.populateEnchantsListview = function() {
            let e = my.pickerListviews[Data.getSelectedPickerTabIndex()];
            let t = [];
            t.push({
                id: 0,
                name: WH.TERMS.none,
                quality: WH.Wow.Item.QUALITY_LEGENDARY,
                _type: self.ENCHANT_SEARCH_TYPE
            });
            for (let e in STATIC_DATA.itemEnchants) {
                if (!STATIC_DATA.itemEnchants.hasOwnProperty(e)) {
                    continue
                }
                let i = STATIC_DATA.itemEnchants[e];
                let n = {
                    id: i.id,
                    name: i.name,
                    visual: i.visual,
                    icon: i.icon,
                    quality: WH.Wow.Item.QUALITY_COMMON,
                    _type: self.ENCHANT_SEARCH_TYPE
                };
                t.push(n)
            }
            e.setData(t)
        }
        ;
        this.slotMenu = function(e) {
            const t = WH.Wow;
            let i = e.data.raw;
            let n = $("a", e.icon).get(0);
            let r = i[0];
            let o = i[1];
            let s = Gatherer.get(WH.Types.ITEM, o);
            let a = o ? WH.TERMS.replace_ellipsis : WH.TERMS.equip_ellipsis;
            let c = t.getInventorySlotName(r);
            let l = {};
            if (CAN_USE_SEPARATE_SHOULDERS) {
                if (r === t.INVENTORY_SLOT_SHOULDERS) {
                    l.generateText = function() {
                        return my.character.settings.separateShoulders ? WH.GlobalStrings.LEFTSHOULDERSLOT : t.getInventorySlotName(t.INVENTORY_SLOT_SHOULDERS)
                    }
                } else if (r === Paperdoll.INVENTORY_SLOT_SHOULDER_2) {
                    c = WH.GlobalStrings.RIGHTSHOULDERSLOT
                }
            }
            let u = [Menu.createHeading({
                label: c,
                options: l
            }), [0, a, Action.openPicker.bind(this, WH.Types.ITEM, r)]];
            if (s) {
                if (s.jsonequip && s.artifactappearances && Object.keys(s.artifactappearances).length !== 0) {
                    let e = [];
                    for (let t in s.artifactappearances) {
                        if (!s.artifactappearances.hasOwnProperty(t)) {
                            continue
                        }
                        let i = s.artifactappearances[t];
                        if (Object.keys(i).length === 0) {
                            continue
                        }
                        let n = [];
                        let o = Menu.createItem({
                            crumb: parseInt(t),
                            label: i["1"] ? i["1"].setname : WH.TERMS.unknown,
                            submenu: n
                        });
                        e.push(o);
                        for (let e in i) {
                            if (!i.hasOwnProperty(e)) {
                                continue
                            }
                            let t = i[e].mod;
                            let a = s.jsonequip.appearances;
                            if (!(a && a[t] && a[t][0])) {
                                continue
                            }
                            let c = WH.ce("span", {
                                className: "artifact-appearance",
                                style: {
                                    backgroundColor: "rgb(" + [i[e].swatchrgb >> 16 & 255, i[e].swatchrgb >> 8 & 255, i[e].swatchrgb & 255].join(",") + ")"
                                }
                            });
                            let l = Menu.createItem({
                                crumb: parseInt(e),
                                label: c,
                                url: Action.onChangeArtifactAppearance.bind(this, r, t)
                            });
                            n.push(l);
                            let u = my.character.settings[ARTIFACT_PROPERTIES[r]];
                            if (u && u === t || !u && s.jsonequip.displayid === a[t][0]) {
                                l.checked = true;
                                o.checked = true
                            }
                        }
                    }
                    u.push([1, WH.TERMS.reforgeAppearance, "javascript:", e])
                }
                u.push([2, WH.TERMS.unequip, Action.unequipItem.bind(this, r)])
            }
            if (u.length > 2) {
                $(n).off("mousedown");
                Menu.add(n, u, {
                    showAtElement: true,
                    leftAndRightClick: true
                })
            } else {
                $(n).on("mousedown", Action.openPicker.bind(this, WH.Types.ITEM, r))
            }
            return n
        }
        ;
        this.summary = function() {
            if (KIOSK_MODE) {
                return
            }
            if (my.elements.summary) {
                WH.de(my.elements.summary);
                WH.de(my.elements.summaryHeading)
            }
            my.elements.summaryHeading = WH.getMajorHeading(WH.TERMS.equipped, 2, null, {
                id: "dressing-room-summary-heading"
            });
            my.elements.summary = WH.ce("div");
            my.elements.summary.id = "dressing-room-summary";
            my.elements.summary.className = "listview";
            WH.ae(my.elements.wrapper, my.elements.summaryHeading);
            WH.ae(my.elements.wrapper, my.elements.summary);
            my.summaryListview = new Listview({
                template: "picker",
                id: "summary",
                parent: "dressing-room-summary",
                data: Data.getEquipmentForSummary(),
                noDataText: WH.TERMS.dressingroomnogear_tip,
                forceBandTop: false,
                clip: false,
                sort: [],
                hideHeader: false,
                hiddenCols: ["level", "pieces"],
                hideBands: 3
            })
        }
        ;
        function e(e, i) {
            let n = [];
            let r = [];
            let o = [];
            let s = [];
            let a = Race.getNames();
            if (a.hasOwnProperty(Race.ID_DRACTHYR_ALLIANCE)) {
                a[Race.ID_DRACTHYR_VISAGE_ALLIANCE] = WH.TERMS.dracthyrVisage
            }
            if (a.hasOwnProperty(Race.ID_DRACTHYR_HORDE)) {
                a[Race.ID_DRACTHYR_VISAGE_HORDE] = WH.TERMS.dracthyrVisage
            }
            WH.cO(a, Data.getMountRaces());
            Object.keys(a).forEach((e => {
                let c = a[e];
                let l = parseInt(e);
                if (!Data.showRace(l)) {
                    return
                }
                let u = Menu.createItem({
                    crumb: l,
                    label: c,
                    options: {
                        className: (e => t(my.character.settings["class"], self.getPrimaryRaceId(e)) ? undefined : "q0").bind(null, l),
                        tinyIcon: (e => t(my.character.settings["class"], self.getPrimaryRaceId(e)) ? Race.getIcon(e, Gender.tryFrom(my.character.settings.gender)) : undefined).bind(null, l),
                        checkedFunc: e => e[0] === my.character.settings.race
                    }
                });
                Menu.setItemUrl(u, Action.onChangeAppearance.bind(null, "race", u, i, true));
                if (my.character.settings.race === l) {
                    WH.st(i, c)
                }
                switch (Race.getSideByRaceId(l)) {
                case Wow.SIDE_ALLIANCE:
                    n.push(u);
                    break;
                case Wow.SIDE_HORDE:
                    r.push(u);
                    break;
                default:
                    if (!Race.isPlayableRace(l) && !Data.isMountRace(l)) {
                        s.push(u)
                    } else {
                        o.push(u)
                    }
                }
            }
            ));
            [n, r, s].forEach((e => e.sort(( (e, t) => Menu.getLabel(e).localeCompare(Menu.getLabel(t))))));
            if (Object.keys(Data.getMountRaces()).length) {
                o.push(Menu.createHeading({
                    label: WH.TERMS.mounts
                }))
            }
            o.sort(( (e, t) => {
                const i = -1;
                const n = 1;
                let r = Data.isMountRace(Menu.getItemCrumb(e));
                let o = Data.isMountRace(Menu.getItemCrumb(t));
                if (Menu.isHeading(e)) {
                    return o ? i : n
                }
                if (Menu.isHeading(t)) {
                    return r ? n : i
                }
                if (r === o) {
                    return Menu.getLabel(e).localeCompare(Menu.getLabel(t))
                }
                return r ? n : i
            }
            ));
            let c = 1;
            e.push(Menu.createHeading({
                label: WH.TERMS.alliance,
                options: {
                    column: c++
                }
            }));
            n.forEach((t => e.push(t)));
            e.push(Menu.createHeading({
                label: WH.TERMS.horde,
                options: {
                    column: c++
                }
            }));
            r.forEach((t => e.push(t)));
            if (o.length) {
                e.push(Menu.createHeading({
                    label: WH.TERMS.neutral,
                    options: {
                        column: c++
                    }
                }));
                o.forEach((t => e.push(t)))
            }
            if (s.length) {
                e.push(Menu.createHeading({
                    label: WH.TERMS.npcs,
                    options: {
                        column: c++
                    }
                }));
                s.forEach((t => e.push(t)))
            }
        }
        function t(e, t) {
            return !Race.isPlayableRace(t) || PC.canBeRace(e, t)
        }
    }
    ;
    const UpdateDisplay = new function() {
        this.animationControl = function(e) {
            let t = e.method("getNumAnimations");
            let i = function(e, t) {
                let i = my.pauseButton.getElement().dataset.paused === "true";
                if (i) {
                    UpdateDisplay.setViewerPause(false)
                }
                if (e.method("isLoaded")) {
                    my.character.settings.animation = t;
                    WH.debug("Setting model viewer animation to:", t);
                    e.method("setAnimation", t);
                    WH.st(my.elements.categoryControls.animation, t);
                    my.lastCustomizationOption = "animation"
                }
                if (i) {
                    setTimeout(UpdateDisplay.setViewerPause.bind(this, true), 1e3)
                }
            };
            let n = [];
            for (let i = 0; i < t; i++) {
                let t = e.method("getAnimation", i);
                if (t && !n.includes(t)) {
                    n.push(t)
                }
            }
            n.sort();
            let r;
            let o;
            let s;
            for (let t = 0, a; a = n[t]; t++) {
                let t = a.charAt(0);
                if (o !== t) {
                    o = t;
                    r = [];
                    my.animationMenu.push(Menu.createItem({
                        crumb: t,
                        label: t,
                        submenu: r,
                        options: {
                            checkedFunc: function(e) {
                                for (let t = 0, i; i = e[Menu.ITEM_SUBMENU][t]; t++) {
                                    if (my.character.settings.animation === i[Menu.ITEM_LABEL]) {
                                        return true
                                    }
                                }
                                return false
                            }
                        }
                    }))
                }
                let n = Menu.createItem({
                    crumb: a,
                    label: a,
                    url: i.bind(undefined, e, a),
                    options: {
                        checkedFunc: function(e) {
                            return my.character.settings.animation === e[Menu.ITEM_LABEL]
                        }
                    }
                });
                r.push(n);
                my.animationMenuFlat.push(n);
                if (a === my.previousAnimation) {
                    s = a
                } else if (a === my.character.settings.animation && !s) {
                    s = a
                }
            }
            Data.configureInGameStyleMenuColumns(my.animationMenu);
            if (s) {
                i(e, s)
            }
            my.elements.categoryControls.animation.parentNode.dataset.disabled = JSON.stringify(my.animationMenuFlat.length === 0);
            my.animationsLoaded = {
                class: my.character.settings["class"],
                race: my.character.settings.race
            }
        }
        ;
        this.appearanceHistorySettings = function() {
            let e = Data.appearanceHistory.getUndoState();
            let t = Data.appearanceHistory.getCurrentHistory();
            my.elements.undo.disabled = !(t.length > 1 && t.length > (e - 1) * -1);
            my.elements.redo.disabled = e >= 0
        }
        ;
        this.character = function() {
            if (!Data.isDataLoaded()) {
                Data.onDataLoaded(arguments.callee.bind(this));
                return
            }
            if (my.paperdoll && !Data.getForceReloadPaperdoll()) {
                my.paperdoll.setPepe(my.character.settings.pepe);
                UpdateDisplay.charEquipment();
                UpdateDisplay.charAppearance();
                UpdateDisplay.summary()
            } else {
                Display.paperdoll();
                Display.summary()
            }
            my.elements.wrapper.dataset.loaded = "true"
        }
        ;
        this.characterSettings = function() {
            Display.characterSettings();
            $('input[name="npc-options"]', my.elements.categoryControls.npcOptions).prop("checked", Data.getNpcOptionsSetting);
            my.customizations = {};
            let e = {};
            let t = [];
            let i = Data.getCustomizationOptions(my.character.settings.race, my.character.settings.gender, my.character.settings["class"]);
            for (let n, r = 0; n = i[r]; r++) {
                let i = undefined;
                let r = [];
                e[n.slug] = r;
                let o = DOM.createImitationSelect({
                    menu: r
                });
                let s = false;
                for (let e, t = 0; e = n.choices[t]; t++) {
                    let a = t + 1;
                    let c = (a < 10 ? " " + a + " " : a) + "   ";
                    let l = {
                        crumb: e.id,
                        label: c + (e.name || ""),
                        options: {
                            checkedFunc: function(e, t) {
                                return my.character.settings[e] === t[0]
                            }
                            .bind(null, n.slug)
                        }
                    };
                    let u;
                    let m = true;
                    if (!Data.custChoiceRequirementsMet(e, my.character.settings)) {
                        if (n.type === OPTION_TYPE_CHECKBOX) {
                            continue
                        }
                        m = false;
                        let t = Data.makeValidCustomizationState(e, my.character.settings, []);
                        if (!t) {
                            continue
                        }
                        l.options.className = "q0";
                        u = function(e) {
                            Data.setCharacterSettings(t);
                            e()
                        }
                    }
                    if (my.charCust.choiceRequirementTypeIsOther(e)) {
                        l.options.className = "q5"
                    } else if (my.charCust.choiceIsNpcOnly(e)) {
                        l.options.className = "q0"
                    }
                    if (e.color) {
                        s = true;
                        l.label = WH.ce("span", undefined, WH.ct(c));
                        let t = WH.ce("span", {
                            className: COLOR_SWATCHES_CLASS
                        });
                        WH.ae(l.label, t);
                        if (e.color2) {
                            t.classList.add("swatch-count-2");
                            WH.ae(t, Display.createColorSwatch(e.color));
                            WH.ae(t, Display.createColorSwatch(e.color2))
                        } else {
                            WH.ae(t, Display.createColorSwatch(e.color))
                        }
                    }
                    l = Menu.createItem(l);
                    l[Menu.ITEM_URL] = Action.onChangeAppearance.bind(null, n.slug, l, o, true);
                    if (u) {
                        l[Menu.ITEM_URL] = u.bind(null, l[Menu.ITEM_URL])
                    }
                    r.push(l);
                    if (m && (i === undefined || e.id === my.character.settings[n.slug])) {
                        i = a;
                        WH.st(o, e.name || a)
                    }
                }
                if (n.type === OPTION_TYPE_CHECKBOX && r.length !== 2) {
                    if (r.length === 1) {
                        WH.debug('Option checkbox has no "checked" choice.', n, r)
                    } else {
                        WH.error('Option checkbox has too many "checked" choices.', n, r)
                    }
                    continue
                }
                if (s) {
                    r.classes = [COLOR_SWATCHES_CLASS + "-menu"]
                }
                my.character.settings[n.slug] = 0;
                if (i !== undefined) {
                    let e = n.choices[i - 1];
                    my.character.settings[n.slug] = e.id;
                    let r = STATIC_DATA.customizationRequiredChoices[e.requirementId];
                    if (r) {
                        t.push(r)
                    }
                } else {
                    WH.debug("Oddly, we found no available value for", n)
                }
                if (r.length > 1) {
                    Display.characterCustomizationOption(n.category, n.slug, n.name, n.type, o, r)
                }
                my.customizations[n.slug] = n
            }
            for (let n, r = 0; n = i[r]; r++) {
                t.forEach((function(t) {
                    let i = false;
                    for (let e, r = 0; e = n.choices[r]; r++) {
                        if (t.indexOf(e.id) >= 0) {
                            i = true;
                            break
                        }
                    }
                    if (!i) {
                        return
                    }
                    e[n.slug].forEach((function(e) {
                        if (t.indexOf(e[Menu.ITEM_CRUMB]) < 0) {
                            e[Menu.ITEM_OPTIONS].className = "q0"
                        }
                    }
                    ))
                }
                ))
            }
            Action.onChangeCategory(my.category);
            this.appearanceHistorySettings()
        }
        ;
        this.charAppearance = function(e) {
            if (my.appearanceNeedsUpdate) {
                if (e) {
                    e = $.extend({}, Data.getCharacterForPaperdoll(), e)
                } else {
                    e = Data.getCharacterForPaperdoll()
                }
                my.paperdoll.updateCharAppearance(e);
                my.appearanceNeedsUpdate = false
            }
        }
        ;
        this.charEquipment = function() {
            let e = [];
            for (let t in my.pendingSlotChanges) {
                if (!my.pendingSlotChanges.hasOwnProperty(t)) {
                    continue
                }
                let i = my.pendingSlotChanges[t];
                let n = null;
                for (let e in my.character.equipment) {
                    if (my.character.equipment.hasOwnProperty(e) && PAPERDOLL_SLOTS[e] == i) {
                        n = my.character.equipment[e];
                        break
                    }
                }
                let r = {
                    raw: [],
                    characterSlot: i
                };
                if (n != null) {
                    n.slotId = i;
                    r.raw = WH.convertPaperdollItemDataToRaw(n);
                    if (ARTIFACT_PROPERTIES[i]) {
                        r.artifactAppearanceMod = my.character.settings[ARTIFACT_PROPERTIES[i]]
                    }
                    r.enchantVisual = n.enchant ? STATIC_DATA.itemEnchants[n.enchant].visual : undefined;
                    r.enchantIcon = n.enchant ? STATIC_DATA.itemEnchants[n.enchant].icon : undefined
                }
                e.push(r)
            }
            my.paperdoll.setPepe(my.character.settings.pepe);
            my.paperdoll.updateSlots(e);
            UpdateDisplay.charAppearance();
            my.pendingSlotChanges = []
        }
        ;
        this.filters = function() {
            let e = $(".dressing-room-picker .filter-armortype");
            if (Data.armorTypeFilterApplies()) {
                e.show()
            } else {
                e.hide()
            }
            let t = $(".dressing-room-picker .filter-mainhandtype");
            if (Data.mainHandTypeFilterApplies()) {
                t.show()
            } else {
                t.hide()
            }
            let i = $(".dressing-room-picker .filter-offhandtype");
            if (Data.offHandTypeFilterApplies()) {
                i.show()
            } else {
                i.hide()
            }
            let n = $(".dressing-room-picker .filter-rangedtype");
            if (Data.rangedTypeFilterApplies()) {
                n.show()
            } else {
                n.hide()
            }
            let r = $(".dressing-room-picker .filter-source");
            if (Data.sourceFilterApplies()) {
                r.show()
            } else {
                r.hide()
            }
            let o = $(".dressing-room-picker .filter-style");
            if (Data.styleFilterApplies()) {
                o.show()
            } else {
                o.hide()
            }
            let s = $(".dressing-room-picker .filter-expansion");
            if (Data.expansionFilterApplies()) {
                s.show()
            } else {
                s.hide()
            }
            let a = $(".dressing-room-picker .filter-name");
            if (my.searchType !== self.ENCHANT_SEARCH_TYPE) {
                a.show()
            } else {
                a.hide()
            }
        }
        ;
        this.setViewerPause = function(e) {
            my.paperdoll.viewer.method("setAnimPaused", e)
        }
        ;
        this.summary = function() {
            if (KIOSK_MODE) {
                return
            }
            my.summaryListview.setData(Data.getEquipmentForSummary())
        }
    }
    ;
    const Data = new function() {
        const e = 33;
        const t = 91;
        const i = 3;
        this.dataLoadCallbacks = [];
        this.armorTypeFilterApplies = function() {
            switch (my.searchType) {
            case WH.Types.ITEM:
                if (Wow.isBodyArmorSlot(my.pickerSearchSlot)) {
                    return true
                }
                break;
            case WH.Types.TRANSMOG_SET:
                return true
            }
            return false
        }
        ;
        this.clearAllSlots = function() {
            for (let e in PAPERDOLL_SLOTS) {
                if (!PAPERDOLL_SLOTS.hasOwnProperty(e)) {
                    continue
                }
                Data.equipItem(PAPERDOLL_SLOTS[e], null);
                Data.equipEnchant(PAPERDOLL_SLOTS[e], 0)
            }
        }
        ;
        this.configureInGameStyleMenuColumns = function(e) {
            let t = Math.min(Math.ceil(e.length / 10), 3);
            if (t > 1) {
                let i = Math.ceil(e.length / t);
                let n = 0;
                let r = 0;
                for (let t = 0, o; o = e[t]; t++) {
                    if (!n || r === i) {
                        if (Menu.getItemOptions(o).column) {
                            break
                        }
                        n++;
                        r = 0;
                        Menu.setItemOption(o, "column", n)
                    }
                    r++
                }
            }
        }
        ;
        this.custChoiceRequirementsMet = function(e, t) {
            return my.charCust.choiceRequirementsMet(e, t, t.race, t.gender, t["class"], Data.getCharCustNpcOptions(my.character.settings))
        }
        ;
        this.equipEnchant = function(e, t) {
            if (e != null) {
                my.pendingSlotChanges.push(e)
            }
            let i = -1;
            for (let t in PAPERDOLL_SLOTS) {
                if (PAPERDOLL_SLOTS.hasOwnProperty(t) && PAPERDOLL_SLOTS[t] == e) {
                    i = t;
                    break
                }
            }
            if (i != -1) {
                Data.setEnchantSlot(i, t)
            }
        }
        ;
        this.equipItem = function(e, t) {
            my.lastSetName = null;
            if (e == null && t && t.jsonequip && Item.getInvTypeSlots(t.jsonequip.slot).length) {
                e = Item.getInvTypeSlots(t.jsonequip.slot)[0]
            }
            if (e != null) {
                my.pendingSlotChanges.push(e)
            }
            let i = -1;
            for (let t in PAPERDOLL_SLOTS) {
                if (PAPERDOLL_SLOTS.hasOwnProperty(t) && PAPERDOLL_SLOTS[t] == e) {
                    i = t;
                    break
                }
            }
            if (i !== -1) {
                Data.setEquipmentSlot(i, t)
            }
            if (e == WH.Wow.INVENTORY_SLOT_MAIN_HAND || e == WH.Wow.INVENTORY_SLOT_OFF_HAND || e == WH.Wow.INVENTORY_SLOT_RANGED) {
                my.appearanceNeedsUpdate = true;
                UpdateDisplay.charAppearance()
            }
        }
        ;
        this.equipItems = function(e) {
            Data.clearAllSlots();
            e.forEach((e => {
                let t = e.itemId;
                let i = e.appearanceMod;
                let n = e.slotId;
                let r = {
                    id: t
                };
                let o = null;
                let s = ARTIFACT_PROPERTIES.hasOwnProperty(n);
                if (i) {
                    let e = WH.Gatherer.get(WH.Types.ITEM, t);
                    if (e) {
                        r.bonuses = Data.getBonusesForAppearanceMod(t, i);
                        if (s && e.artifactappearances && (e.jsonequip.appearances || {})[i]) {
                            o = i
                        }
                    } else {
                        Data.onDataLoaded(function(e, t, i) {
                            let n = {
                                id: e,
                                bonuses: Data.getBonusesForAppearanceMod(e, t)
                            };
                            Data.equipItem(i, n);
                            let r = WH.Gatherer.get(WH.Types.ITEM, e);
                            if (s && r.artifactappearances && (r.jsonequip.appearances || {})[t]) {
                                my.character.settings[ARTIFACT_PROPERTIES[i]] = t
                            }
                            Data.updateCharacter(my.character)
                        }
                        .bind(null, t, i, n))
                    }
                }
                Data.equipItem(n, r);
                if (o != null) {
                    my.character.settings[ARTIFACT_PROPERTIES[n]] = i
                }
                if (e.enchantVisual) {
                    for (let t in STATIC_DATA.itemEnchants) {
                        if (!STATIC_DATA.itemEnchants.hasOwnProperty(t)) {
                            continue
                        }
                        let i = STATIC_DATA.itemEnchants[t];
                        if (i.visual === e.enchantVisual) {
                            Data.equipEnchant(n, i.id);
                            break
                        }
                    }
                }
            }
            ));
            Data.updateCharacter(my.character)
        }
        ;
        this.expansionFilterApplies = function() {
            return my.searchType !== self.ENCHANT_SEARCH_TYPE && !WH.isClassicTree()
        }
        ;
        this.gatherCurrentItems = function(e) {
            Data.setDataLoaded(false);
            let t = [];
            for (let e in my.character.equipment) {
                if (!my.character.equipment.hasOwnProperty(e)) {
                    continue
                }
                let i = my.character.equipment[e];
                if (i.itemId && !my.itemsRequested[i.itemId]) {
                    t.push(i.itemId);
                    my.itemsRequested[i.itemId] = true
                }
            }
            if (!t.length) {
                Data.setDataLoaded(true);
                return
            }
            WH.Gatherer.fetchItems(t, {
                onSuccess: Data.setDataLoaded.bind(Data, true, e)
            })
        }
        ;
        this.getBonusesForAppearanceMod = function(e, t) {
            let i = WH.Gatherer.get(WH.Types.ITEM, e);
            if (!i || !i.json || !i.json.bonustrees || !i.json.bonustrees.length) {
                return []
            }
            let n = g_item_bonuscontexts || {};
            let r = i.json.bonustrees;
            for (let e in n) {
                if (!n.hasOwnProperty(e)) {
                    continue
                }
                for (let i, o = 0; i = n[e][o]; o++) {
                    let e = i[0];
                    let n = i[1];
                    if (r.indexOf(e) >= 0) {
                        let e = g_itembonuses[n] || [];
                        if (!e.length) {
                            continue
                        }
                        for (let i, r = 0; i = e[r]; r++) {
                            if (i[0] == 7 && i[1] == t) {
                                return [n]
                            }
                        }
                    }
                }
            }
            return []
        }
        ;
        this.getCharacterForPaperdoll = function() {
            let e = ModelViewer.getSheathTypes((my.character.equipment[SLOT_MAIN_HAND] || {}).itemId, (my.character.equipment[SLOT_OFF_HAND] || {}).itemId);
            let t = $.extend({}, my.character.settings, {
                charCustomization: {
                    race: my.character.settings.race,
                    gender: STATIC_DATA.modelGenders[my.character.settings.race][my.character.settings.gender],
                    options: []
                },
                sheathMain: e.mainhand,
                sheathOff: e.offhand,
                talentSpec: my.character.settings.specialization,
                charClass: my.character.settings["class"],
                npcModel: my.character.settings.mount
            });
            const i = STATIC_DATA.conditionalCategories.find((e => e.category === my.category));
            t.characterModel = i?.model;
            const n = STATIC_DATA.customizationOptions[t.characterModel ?? STATIC_DATA.raceGenderMap[my.character.settings.race]?.[my.character.settings.gender]] ?? [];
            for (let e in my.customizations) {
                if (!my.customizations.hasOwnProperty(e) || !my.character.settings.hasOwnProperty(e)) {
                    continue
                }
                let i = my.customizations[e];
                let r = my.character.settings[e];
                delete t[e];
                if (!n.some((e => e.id === i.id))) {
                    continue
                }
                t.charCustomization.options.push({
                    optionId: i.id,
                    choiceId: r
                })
            }
            return t
        }
        ;
        this.getCharCustNpcOptions = e => {
            if (!Race.isPlayableRace(e.race) || e.npcOptions) {
                return my.otherRequirementTypesAllNpc ? my.charCust.NPC_CHOICES_OTHER_ALLOWED : my.charCust.NPC_CHOICES_ALLOWED
            }
            return my.charCust.NPC_CHOICES_DISALLOWED
        }
        ;
        this.getCurrentDisplayId = function() {
            let e = Data.getCustomizationOptions(my.character.settings.race, my.character.settings.gender, my.character.settings["class"]);
            for (let t = 0, i; i = e[t]; t++) {
                if (i.category !== my.category || !my.character.settings[i.slug]) {
                    continue
                }
                for (let e = 0, t; t = i.choices[e]; e++) {
                    if (t.id === my.character.settings[i.slug] && t.hasOwnProperty("displayId")) {
                        return t.displayId
                    }
                }
            }
            return null
        }
        ;
        this.getCustomizationOptions = function(e, t, i) {
            if (!Race.isPlayableRace(e)) {
                i = 0
            }
            const n = STATIC_DATA.raceGenderMap[e]?.[t];
            if (n == null) {
                return []
            }
            const r = (STATIC_DATA.customizationOptions[n] || []).slice();
            STATIC_DATA.conditionalCategories.filter((t => {
                let n = t.requirementType || 0;
                if (n === 0) {
                    return true
                }
                if (t.requiredRaces && !t.requiredRaces.includes(e)) {
                    return false
                }
                if ((n & my.charCust.REQUIREMENT_TYPE_FLAG_PLAYER_CLASS) === 0) {
                    return true
                }
                return t.classMask === 0 || (1 << i - 1 & t.classMask) !== 0
            }
            )).map((e => (STATIC_DATA.customizationOptions[e.model] || []).filter((t => t.category = e.category)))).forEach((e => e.forEach((e => r.push(e)))));
            return r
        }
        ;
        this.getEquipmentForPaperdoll = function() {
            let e = [];
            let t = $.extend(true, {}, my.character.equipment);
            for (let i in t) {
                if (!t.hasOwnProperty(i)) {
                    continue
                }
                let n = t[i];
                if (n.itemId && g_items[n.itemId]) {
                    n.slotId = PAPERDOLL_SLOTS[i];
                    let t = n.enchant && STATIC_DATA.itemEnchants[n.enchant] || {};
                    e.push({
                        raw: WH.convertPaperdollItemDataToRaw(n),
                        artifactAppearanceMod: my.character.settings[ARTIFACT_PROPERTIES[n.slotId]],
                        characterSlot: PAPERDOLL_SLOTS[i],
                        enchantIcon: t.icon,
                        enchantVisual: t.visual
                    })
                }
            }
            return e
        }
        ;
        this.getEquipmentForSummary = function() {
            let e = [];
            let t = $.extend(true, {}, my.character.equipment);
            for (let i in t) {
                if (!t.hasOwnProperty(i)) {
                    continue
                }
                let n = t[i];
                if (n.itemId && g_items[n.itemId]) {
                    let t = $.extend(true, {}, g_items[n.itemId]);
                    t._type = WH.Types.ITEM;
                    t.id = n.itemId;
                    t.bonuses = [n.itemBonus ? n.itemBonus : 0];
                    if (t.json) {
                        t.source = t.json.source;
                        t.sourcemore = t.json.sourcemore;
                        t.slot = t.json.slot
                    }
                    if (!t.name && t["name_" + Locale.getName()]) {
                        t.name = t["name_" + Locale.getName()]
                    }
                    e.push(t)
                }
            }
            return e
        }
        ;
        this.getForceReloadPaperdoll = function() {
            return my.forceReloadPaperdoll
        }
        ;
        this.getLastViewedModel = function(e) {
            let t = LocalStorage.get(e);
            if (!t || !Array.isArray(t)) {
                return null
            }
            let i = {
                equipment: {},
                settings: {}
            };
            for (let e = 0; e < t.length; ++e) {
                let n = t[e];
                if (e === t.length - 1) {
                    let e = parseInt(n.r) || parseInt(n.race);
                    if (!isNaN(e) && e > 0) {
                        i.settings.race = e
                    }
                    let t = parseInt(n.s) || parseInt(n.gender);
                    if (!isNaN(t) && t > 0) {
                        i.settings.gender = t
                    }
                    for (let e = 0, t; t = LAST_MODEL_POSITIVE_INT_FIELDS[e]; e++) {
                        let e = parseInt(n[t]);
                        if (!isNaN(e) && e > 0) {
                            i.settings[t] = e
                        }
                    }
                    for (let e = 0, t; t = LAST_MODEL_INT_FIELDS[e]; e++) {
                        let e = parseInt(n[t]);
                        if (!isNaN(e) && e > 0) {
                            i.settings[t] = e
                        }
                    }
                    Data.updateLegacyCustomizationOptions(i.settings);
                    if (i.settings.race && i.settings.gender) {
                        Data.getCustomizationOptions(i.settings.race, i.settings.gender, i.settings["class"]).forEach((function(e) {
                            if (n.hasOwnProperty(e.slug)) {
                                i.settings[e.slug] = n[e.slug]
                            }
                        }
                        ))
                    }
                } else {
                    let e = n.charSlot || Item.getInvTypeSlots(n.slot)[0];
                    let t = -1;
                    for (let i in PAPERDOLL_SLOTS) {
                        if (PAPERDOLL_SLOTS.hasOwnProperty(i) && PAPERDOLL_SLOTS[i] == e) {
                            t = i;
                            break
                        }
                    }
                    if (t !== -1) {
                        i.equipment[t] = {
                            itemId: n.itemId,
                            itemBonus: n.itemBonus > 0 ? n.itemBonus : 0
                        }
                    }
                }
            }
            if (!i.settings.npcOptions) {
                if (Data.getOptionUsingNpcCustomization(i) !== undefined) {
                    i.settings.npcOptions = 1
                }
            }
            return i
        }
        ;
        this.getLegacyInGameLink = function(e) {
            let t = "";
            for (let e in my.character.equipment) {
                if (!my.character.equipment.hasOwnProperty(e)) {
                    continue
                }
                let i = my.character.equipment[e];
                if (i.hasOwnProperty("itemId") && i.itemId) {
                    let n = 0;
                    let r = Gatherer.get(WH.Types.ITEM, i.itemId);
                    if (r && r.hasOwnProperty("artifactappearances")) {
                        let t = ARTIFACT_PROPERTIES[PAPERDOLL_SLOTS[e]];
                        for (let e in r.artifactappearances) {
                            if (!r.artifactappearances.hasOwnProperty(e)) {
                                continue
                            }
                            for (let i in r.artifactappearances[e]) {
                                if (!r.artifactappearances[e].hasOwnProperty(i)) {
                                    continue
                                }
                                if (r.artifactappearances[e][i].mod === my.character.settings[t]) {
                                    n = r.artifactappearances[e][i].aid;
                                    break
                                }
                            }
                        }
                    }
                    t += "f(" + i.itemId;
                    if (n) {
                        t += ",'" + (i.itemBonus || 0) + ":" + n + "'"
                    } else if (i.itemBonus) {
                        t += "," + i.itemBonus
                    } else if (i.enchant) {
                        t += ",0"
                    }
                    if (i.enchant) {
                        t += "," + i.enchant
                    }
                    t += ")"
                }
            }
            if (t) {
                t = '/run local function f(i,b,e)DressUpItemLink(format("item:%u:%u:::::::::256::1:%s",i,e or 0,b or 0))end;' + t
            }
            requestAnimationFrame(( () => e(t)))
        }
        ;
        this.getMountRaces = () => STATIC_DATA.mountRaces || {};
        this.getNpcOptionsSetting = function() {
            return !!(my.character.settings && my.character.settings.npcOptions)
        }
        ;
        this.getOptionUsingNpcCustomization = function(e) {
            let t = Data.getCustomizationOptions(e.settings.race, e.settings.gender, e.settings["class"]);
            for (let i, n = 0; i = t[n]; n++) {
                let t = e.settings[i.slug];
                if (t === undefined) {
                    continue
                }
                let n = false;
                for (let e, r = 0; e = i.choices[r]; r++) {
                    if (e.id === t) {
                        n = !my.charCust.choiceIsNpcOnly(e);
                        break
                    }
                }
                if (!n) {
                    return i
                }
            }
        }
        ;
        this.getOutfitInGameLink = function(e, t) {
            let i = {};
            Object.keys(PAPERDOLL_SLOTS).forEach((e => {
                i[PAPERDOLL_SLOTS[e]] = parseInt(e)
            }
            ));
            let r = my.character.equipment;
            let o = {};
            Object.keys(i).forEach((e => {
                let t = i[e];
                let n = r[t];
                if (!n || !n.itemId) {
                    return
                }
                o[e] = {
                    item: n.itemId,
                    mod: ARTIFACT_PROPERTIES.hasOwnProperty(e) && (Gatherer.get(WH.Types.ITEM, n.itemId) || {}).artifactappearances && my.character.settings[ARTIFACT_PROPERTIES[e]] || 0
                };
                if (n.itemBonus) {
                    (g_itembonuses[n.itemBonus] || []).forEach((t => {
                        if (t[0] === 7) {
                            o[e].mod = t[1]
                        }
                    }
                    ))
                }
            }
            ));
            WH.fetch(Url.generatePath("/dressing-room/appearance-lookup"), {
                json: {
                    slots: o
                },
                success: o => {
                    let s;
                    if (t) {
                        let e = [o[Wow.INVENTORY_SLOT_HEAD] || 0, o[Wow.INVENTORY_SLOT_SHOULDERS] || 0, o[Paperdoll.INVENTORY_SLOT_SHOULDER_2] || 0, o[Wow.INVENTORY_SLOT_BACK] || 0, o[Wow.INVENTORY_SLOT_CHEST] || 0, o[Wow.INVENTORY_SLOT_SHIRT] || 0, o[Wow.INVENTORY_SLOT_TABARD] || 0, o[Wow.INVENTORY_SLOT_WRISTS] || 0, o[Wow.INVENTORY_SLOT_HANDS] || 0, o[Wow.INVENTORY_SLOT_WAIST] || 0, o[Wow.INVENTORY_SLOT_LEGS] || 0, o[Wow.INVENTORY_SLOT_FEET] || 0, o[Wow.INVENTORY_SLOT_MAIN_HAND] || 0, -1, (r[i[Wow.INVENTORY_SLOT_MAIN_HAND]] || {}).enchant || 0, o[Wow.INVENTORY_SLOT_OFF_HAND] || 0, (r[i[Wow.INVENTORY_SLOT_OFF_HAND]] || {}).enchant || 0];
                        s = "/outfit v1 " + e.join(",")
                    } else {
                        let e = n([o[Wow.INVENTORY_SLOT_HEAD] || 0, o[Wow.INVENTORY_SLOT_SHOULDERS] || 0, o[Wow.INVENTORY_SLOT_BACK] || 0, o[Wow.INVENTORY_SLOT_CHEST] || 0, o[Wow.INVENTORY_SLOT_SHIRT] || 0, o[Wow.INVENTORY_SLOT_TABARD] || 0, o[Wow.INVENTORY_SLOT_WRISTS] || 0, o[Wow.INVENTORY_SLOT_HANDS] || 0, o[Wow.INVENTORY_SLOT_WAIST] || 0, o[Wow.INVENTORY_SLOT_LEGS] || 0, o[Wow.INVENTORY_SLOT_FEET] || 0, o[Wow.INVENTORY_SLOT_MAIN_HAND] || 0, o[Wow.INVENTORY_SLOT_OFF_HAND] || 0, (r[i[Wow.INVENTORY_SLOT_MAIN_HAND]] || {}).enchant || 0, (r[i[Wow.INVENTORY_SLOT_OFF_HAND]] || {}).enchant || 0, 0, o[Paperdoll.INVENTORY_SLOT_SHOULDER_2] || 0]);
                        s = "|cffff80ff|Houtfit:" + e + "|h[|T1598183:13:13:-1:0|tOutfit]|h|r";
                        s = "/run print('" + s.replace(/\\/g, "\\\\").replace(/'/g, "\\'").replace(/\|/g, "\\124") + "')"
                    }
                    e(s)
                }
                ,
                error: () => {
                    alert(WH.TERMS.internalerror_tip)
                }
            })
        }
        ;
        this.getPaperdollModelOptions = function() {
            let e = window.innerWidth;
            if (e < 360) {
                return {
                    offset: [0, .15],
                    zoom: -40
                }
            }
            if (e < 450) {
                return {
                    offset: [0, .075],
                    zoom: -30
                }
            }
            return {
                offset: [0, 0],
                zoom: -20
            }
        }
        ;
        this.getRandomAppearanceSettings = function(e, t, i) {
            let n = {
                race: e,
                gender: t,
                class: i,
                level: 100,
                npcOptions: !Race.isPlayableRace(e) || Data.getNpcOptionsSetting() ? 1 : 0
            };
            Object.entries(my.charCust.getRandomChoices(e, t, i, Data.getCharCustNpcOptions(n))).forEach(( ([e,t]) => n[e] = t));
            return n
        }
        ;
        this.getSelectedPickerTabIndex = function() {
            if (my.searchType === WH.Types.ITEM_SET) {
                return 1
            }
            return my.pickerTabs.getSelectedTab()
        }
        ;
        this.isDataLoaded = function() {
            return my.dataLoaded
        }
        ;
        this.isMountRace = e => Data.getMountRaces().hasOwnProperty(e);
        this.isValidPickerData = function(e) {
            return true
        }
        ;
        this.makeValidCustomizationState = function(e, t, i) {
            let n;
            let r = Data.getCustomizationOptions(t.race, t.gender, t["class"]);
            for (let t, i = 0; t = r[i]; i++) {
                let i;
                let r;
                for (r = 0; i = t.choices[r]; r++) {
                    if (e.id === i.id) {
                        n = t.slug;
                        break
                    }
                }
            }
            if (!n) {
                WH.error("Could not find the option for choice", e);
                return null
            }
            if (i.indexOf(n) >= 0) {
                return null
            }
            let o = WH.cO({}, t);
            o[n] = e.id;
            if (Data.custChoiceRequirementsMet(e, t)) {
                return o
            } else if ((e.requirementType & my.charCust.REQUIREMENT_TYPE_FLAG_PLAYER_CLASS) !== 0 && (e.classMask && (1 << t["class"] - 1 & e.classMask) === 0)) {
                return null
            }
            let s = STATIC_DATA.customizationRequiredChoices[e.requirementId];
            if (!(s || []).length) {
                return null
            }
            let a = i.slice(0);
            a.push(n);
            let c = [];
            s.forEach((function(e) {
                let t;
                for (let i, n = 0; i = r[n]; n++) {
                    let n;
                    let r;
                    for (r = 0; n = i.choices[r]; r++) {
                        if (n.id === e) {
                            t = n;
                            break
                        }
                    }
                }
                if (!t) {
                    return
                }
                let i = Data.makeValidCustomizationState(t, o, a);
                if (!i) {
                    return
                }
                let n = 0;
                for (let e in i) {
                    if (i.hasOwnProperty(e) && i[e] !== o[e]) {
                        n++
                    }
                }
                c.push({
                    changes: n,
                    settings: i
                })
            }
            ));
            if (c.length) {
                c.sort((function(e, t) {
                    return e.changes - t.changes
                }
                ));
                return c[0].settings
            }
            return null
        }
        ;
        this.mainHandTypeFilterApplies = function() {
            return my.searchType === WH.Types.ITEM && my.pickerEquipSlot === Wow.INVENTORY_SLOT_MAIN_HAND || false
        }
        ;
        this.offHandTypeFilterApplies = function() {
            return my.searchType === WH.Types.ITEM && my.pickerEquipSlot === Wow.INVENTORY_SLOT_OFF_HAND || false
        }
        ;
        this.onCharacterLoaderError = function() {
            delete my.elements.importControl.dataset.importing;
            alert(my.characterLoader.getCharacterErrorText() || WH.TERMS.error)
        }
        ;
        this.onCharacterLoaderSuccess = function(e, t, i) {
            WH.ee(my.elements.characterLoader);
            e = e.appearance;
            let n = {
                race: e.playable_race.id,
                gender: e.gender.type === "FEMALE" ? 1 : 0,
                class: e.playable_class.id
            };
            Data.setCharacterSettings(n);
            UpdateDisplay.characterSettings();
            Data.getCustomizationOptions(n.race, n.gender, n["class"]).forEach((function(t) {
                (e.customizations || []).forEach((function(e) {
                    if (e.option && e.choice && e.option.id === t.id && e.choice.id) {
                        n[t.slug] = e.choice.id
                    }
                }
                ))
            }
            ));
            Data.setCharacterSettings(n);
            if (e.items) {
                let t = [];
                for (let i, n = 0; i = e.items[n]; n++) {
                    if (HIDDEN_ITEMS.indexOf(i.id) >= 0) {
                        continue
                    }
                    let e = {
                        itemId: i.id,
                        appearanceMod: i.item_appearance_modifier_id,
                        slotId: i.internal_slot_id + 1
                    };
                    if (i.enchant) {
                        e.enchantVisual = i.enchant
                    }
                    t.push(e)
                }
                Data.equipItems(t)
            } else {
                Data.updateCharacter(my.character)
            }
            delete my.elements.importControl.dataset.importing
        }
        ;
        this.onCharacterLoading = function() {
            my.elements.importControl.dataset.importing = "true"
        }
        ;
        this.onDataLoaded = function(e) {
            this.dataLoadCallbacks.push(e)
        }
        ;
        this.parseOutfitLinkHash = function(n) {
            let r = new RegExp(".{" + i + "}","g");
            return n.match(r).map((n => n.split("").reduce(( (n, r, o) => n + Math.pow(t, i - 1 - o) * (r.charCodeAt(0) - e)), 0)))
        }
        ;
        this.rangedTypeFilterApplies = function() {
            switch (my.searchType) {
            case WH.Types.ITEM:
                if (my.pickerSearchSlot === WH.Wow.INVENTORY_SLOT_RANGED) {
                    return true
                }
                break
            }
            return false
        }
        ;
        this.setCharacter = function(e) {
            if (e) {
                my.character = $.extend(true, {}, CHARACTER_TEMPLATE, e)
            } else {
                my.character = $.extend(true, {}, CHARACTER_TEMPLATE)
            }
            let t = Race.getRequiredGender(my.character.settings.race);
            my.elements.character.dataset["class"] = my.character.settings["class"];
            my.elements.character.dataset.race = my.character.settings.race;
            my.elements.character.dataset.npcRace = JSON.stringify(!Race.isPlayableRace(self.getPrimaryRaceId()));
            my.elements.character.dataset.gender = my.character.settings.gender;
            my.elements.character.dataset.genderRestriction = t ? t.getFilename() : "no-restriction";
            if (isMountRace()) {
                my.character.previousEquipment = my.character.equipment;
                my.character.equipment = {};
                delete my.character.settings.mount;
                my.elements.character.dataset.mount = 1
            } else if (my.character.previousEquipment) {
                my.character.equipment = my.character.previousEquipment;
                my.character.previousEquipment = undefined;
                delete my.elements.character.dataset.mount
            }
            WH.calc.hash.update()
        }
        ;
        this.setCharacterSettings = function(e) {
            let t = Data.validateGender(e.race || my.character.settings.race, typeof e.gender === "number" ? e.gender : my.character.settings.gender);
            if (typeof t === "number" && t !== my.character.settings.gender) {
                my.character.settings.gender = t;
                Data.setForceReloadPaperdoll(true)
            }
            if ("race"in e && e.race !== my.character.settings.race) {
                my.character.settings.race = e.race;
                Data.setForceReloadPaperdoll(true)
            }
            let i = "class"in e ? e["class"] : "classs"in e ? e.classs : null;
            if (i != null && i !== my.character.settings["class"]) {
                my.character.settings["class"] = i;
                Data.setForceReloadPaperdoll(true)
            }
            for (let t in my.customizations) {
                if (!my.customizations.hasOwnProperty(t) || !e.hasOwnProperty(t)) {
                    continue
                }
                if (my.character.settings[t] !== e[t]) {
                    my.character.settings[t] = e[t];
                    my.appearanceNeedsUpdate = true
                }
            }
        }
        ;
        this.setDataLoaded = function(e, t) {
            my.dataLoaded = e;
            while (e && this.dataLoadCallbacks.length) {
                this.dataLoadCallbacks.shift()()
            }
        }
        ;
        this.setEnchantSlot = function(e, t) {
            my.character.equipment[e].enchant = t
        }
        ;
        this.setEquipmentSlot = function(e, t) {
            my.character.equipment[e].itemId = t ? t.id : 0;
            my.character.equipment[e].itemBonus = WH.bonusesBtnGetContextBonusId(t ? t.bonuses : []);
            let i = PAPERDOLL_SLOTS[e];
            if (ARTIFACT_PROPERTIES[i]) {
                my.character.settings[ARTIFACT_PROPERTIES[i]] = 0
            }
        }
        ;
        this.setForceReloadPaperdoll = function(e) {
            my.forceReloadPaperdoll = e
        }
        ;
        this.setLastViewedModel = function(e) {
            let t = [];
            for (let e in my.character.equipment) {
                if (!my.character.equipment.hasOwnProperty(e)) {
                    continue
                }
                let i = my.character.equipment[e];
                if (i.itemId) {
                    t.push({
                        itemId: i.itemId,
                        itemBonus: i.itemBonus ? i.itemBonus : 0,
                        charSlot: PAPERDOLL_SLOTS[e]
                    })
                }
            }
            if (t.length > 0) {
                let e = $.extend({}, my.character.settings);
                e.date = (new Date).getTime();
                t.push(e);
                LocalStorage.set(LocalStorage.KEY_WOW_DRESSING_ROOM_LAST_MODEL, t)
            }
            if (!e) {
                Data.appearanceHistory.setLast()
            }
        }
        ;
        this.setMount = function(e) {
            my.character.settings.mount = e;
            Data.updateCharacter(my.character)
        }
        ;
        this.setProfile = function(e, t) {
            if (t && t.length) {
                Data.clearAllSlots();
                Data.setCharacterSettings(e);
                for (let e = 0; e < t.length; ++e) {
                    let i = t[e];
                    if (!i[10]) {
                        Data.equipItem(i[0], {
                            id: i[9] ? i[9] : i[1],
                            bonuses: i[9] ? [] : i.slice(11, 17)
                        })
                    }
                }
                Data.updateCharacter(my.character)
            }
            setTimeout((function() {
                delete my.elements.importControl.dataset.importing
            }
            ), 100)
        }
        ;
        this.showRace = function(e) {
            return ![Race.ID_PANDAREN_ALLIANCE, Race.ID_PANDAREN_HORDE].includes(e)
        }
        ;
        this.sourceFilterApplies = function() {
            return my.searchType === WH.Types.ITEM
        }
        ;
        this.styleFilterApplies = function() {
            return my.searchType === WH.Types.TRANSMOG_SET
        }
        ;
        this.updateCharacter = function(e, t) {
            e.settings.gender = Data.validateGender(e.settings.race, e.settings.gender);
            e = Data.validateNpcOptions(e);
            Data.setCharacter(e);
            Data.onDataLoaded(Data.validateItems);
            Data.gatherCurrentItems(true);
            UpdateDisplay.characterSettings();
            UpdateDisplay.character();
            Data.setLastViewedModel(t)
        }
        ;
        this.updateLegacyCustomizationOptions = function(e) {
            if (!e.hasOwnProperty("facetype")) {
                return
            }
            let t = [];
            let i = STATIC_DATA.customizationConversion[e.race];
            i = i && i[e.gender];
            if (!i) {
                return
            }
            LEGACY_CUSTOMIZATION_TYPES.forEach((function(n) {
                if (!i.hasOwnProperty(n.id)) {
                    return
                }
                let r = e[n.name] || 0;
                let o = i[n.id][r];
                if (!o) {
                    return
                }
                if (o.hasOwnProperty(LEGACY_CUSTOMIZATION_NONE)) {
                    t = t.concat(o[LEGACY_CUSTOMIZATION_NONE])
                }
                LEGACY_CUSTOMIZATION_TYPES.forEach((function(i) {
                    if (!o.hasOwnProperty(i.id)) {
                        return
                    }
                    let n = o[i.id];
                    let r = e[i.name] || 0;
                    if (n.hasOwnProperty(r)) {
                        t = t.concat(n[r])
                    }
                }
                ))
            }
            ));
            LEGACY_CUSTOMIZATION_TYPES.forEach((function(t) {
                delete e[t.name]
            }
            ));
            let n = Data.getCustomizationOptions(e.race, e.gender, e["class"]);
            n.forEach((function(i) {
                i.choices.forEach((function(n) {
                    if (t.includes(n.id)) {
                        e[i.slug] = n.id
                    }
                }
                ))
            }
            ))
        }
        ;
        this.userHasValidProfiles = function() {
            if (WH.isRetailTree() && WH.isSet("g_user") && g_user.id && g_user.lists) {
                for (let e in g_user.lists) {
                    if (!g_user.lists.hasOwnProperty(e)) {
                        continue
                    }
                    let t = g_user.lists[e];
                    if (t.lists) {
                        for (let e in t.lists) {
                            if (!t.lists.hasOwnProperty(e)) {
                                continue
                            }
                            let i = t.lists[e];
                            if (i.type == -1) {
                                return true
                            }
                        }
                    }
                }
            }
            return false
        }
        ;
        this.validateGender = function(e, t) {
            return Race.validateGender(e, Gender.tryFrom(t)).value
        }
        ;
        this.validateItems = function() {
            let e = [];
            for (let t in my.character.equipment) {
                if (!my.character.equipment.hasOwnProperty(t)) {
                    continue
                }
                t = parseInt(t);
                let i = my.character.equipment[t];
                if (!i || !i.itemId) {
                    continue
                }
                let n = Gatherer.get(WH.Types.ITEM, i.itemId);
                if (!n) {
                    WH.error("Equipped item not found in Gatherer.", i.itemId);
                    continue
                }
                let r = (n.jsonequip || n.json || {}).slotbak;
                if (!r) {
                    let i = n["name_" + Locale.getName()] || n.name;
                    WH.error("Equipped item does not have an inventory type.", i, n);
                    e.push(t);
                    continue
                }
                let o = Item.getInvTypeSlots(r);
                if (!o.length) {
                    WH.error("Inventory type does not have any valid slots.", r, n);
                    e.push(t);
                    continue
                }
                let s = PAPERDOLL_SLOTS[t];
                if (!(o.includes(s) || CAN_USE_SEPARATE_SHOULDERS && t === SLOT_SHOULDER_2 && r === Item.INVENTORY_TYPE_SHOULDERS || n.quality === Item.QUALITY_ARTIFACT && (s === Wow.INVENTORY_SLOT_OFF_HAND && r === Item.INVENTORY_TYPE_MAIN_HAND || s === Wow.INVENTORY_SLOT_MAIN_HAND && r === Item.INVENTORY_TYPE_OFF_HAND))) {
                    WH.error("Equipped item slot does not match character slot.", JSON.stringify({
                        characterSlot: PAPERDOLL_SLOTS[t],
                        itemSlots: o
                    }), n);
                    e.push(t)
                }
            }
            if (e.length) {
                e.forEach((function(e) {
                    Data.setEquipmentSlot(e, null)
                }
                ));
                WH.calc.hash.update()
            }
        }
        ;
        this.validateNpcOptions = function(e) {
            if (!Race.isPlayableRace(self.getPrimaryRaceId(e.settings.race)) || e.settings.npcOptions) {
                return e
            }
            let t = 0;
            let i;
            while ((i = Data.getOptionUsingNpcCustomization(e)) !== undefined) {
                if (++t >= 100) {
                    WH.error("Fail safe: tried to reset NPC options too many times.");
                    break
                }
                my.appearanceNeedsUpdate = true;
                e.settings[i.slug] = undefined;
                for (let t, n = 0; t = i.choices[n]; n++) {
                    if (!my.charCust.choiceIsNpcOnly(t)) {
                        e.settings[i.slug] = t.id;
                        break
                    }
                }
            }
            return e
        }
        ;
        function n(n) {
            return n.reduce(( (n, r) => {
                for (let o = i - 1; o >= 0; o--) {
                    n += String.fromCharCode(Math.floor(r / Math.pow(t, o)) % t + e)
                }
                return n
            }
            ), "")
        }
    }
    ;
    Data.appearanceHistory = new function() {
        let e = {
            doNotDiff: ["npcOptions"],
            doNotSave: ["artifactAppearanceMod", "artifactAppearanceMainHand", "artifactAppearanceOffHand", "gender", "level", "mount", "pepe", "specialization"],
            maxLength: 50,
            version: 1
        };
        let t = {
            undoState: 0
        };
        this.getCurrent = function() {
            let e = Data.appearanceHistory.getCurrentHistory();
            return e.pop() || null
        }
        ;
        this.getCurrentHistory = function() {
            if (!my.character.settings) {
                return []
            }
            let e = Data.appearanceHistory.getHistory().entries || {};
            if (!e[my.character.settings.race] || !Array.isArray(e[my.character.settings.race][my.character.settings.gender])) {
                return []
            }
            return e[my.character.settings.race][my.character.settings.gender]
        }
        ;
        this.getHistory = function() {
            let t = {
                version: e.version,
                entries: {}
            };
            let i = LocalStorage.get(LocalStorage.KEY_WOW_DRESSING_ROOM_APPEARANCE_HISTORY);
            if (!i || typeof i !== "object" || Array.isArray(i)) {
                return t
            }
            if (!i.version) {
                let t = [];
                for (let e in i) {
                    if (i.hasOwnProperty(e) && typeof i[e] === "object") {
                        t.push(e)
                    }
                }
                i.version = e.version;
                i.entries = {};
                t.forEach((function(e) {
                    for (let t in i[e]) {
                        if (!i[e].hasOwnProperty(t) || !Array.isArray(i[e][t])) {
                            continue
                        }
                        i[e][t].forEach((function(e) {
                            e.gender = t;
                            Data.updateLegacyCustomizationOptions(e);
                            delete e.gender
                        }
                        ))
                    }
                    i.entries[e] = i[e];
                    delete i[e]
                }
                ));
                LocalStorage.set(LocalStorage.KEY_WOW_DRESSING_ROOM_APPEARANCE_HISTORY, i)
            }
            return i
        }
        ;
        this.getLast = function() {
            let e = Data.appearanceHistory.getHistory();
            let t = e.race || 1;
            let i = e.gender || 0;
            let n = e.entries || {};
            let r = Data.appearanceHistory.getLastByCombo(t, i);
            if (!r) {
                for (t in n) {
                    if (!n.hasOwnProperty(t)) {
                        continue
                    }
                    for (i in n[t]) {
                        if (n[t].hasOwnProperty(i) && Array.isArray(n[t][i])) {
                            r = n[t][i].pop();
                            r.race = t;
                            r.gender = i;
                            break
                        }
                    }
                    if (r) {
                        break
                    }
                }
            } else {
                r.race = t;
                r.gender = i
            }
            return r
        }
        ;
        this.getLastByCombo = function(e, t) {
            let i = Data.appearanceHistory.getHistory().entries;
            if (!i.hasOwnProperty(e) || !Array.isArray(i[e][t])) {
                return null
            }
            return i[e][t].pop()
        }
        ;
        this.setLast = function() {
            let t = Data.appearanceHistory.getCurrent();
            let i = false;
            let n;
            if (t) {
                for (n in my.character.settings) {
                    if (e.doNotSave.indexOf(n) > -1 || e.doNotDiff.indexOf(n) > -1 || my.character.settings[n] === t[n]) {
                        continue
                    }
                    i = true;
                    break
                }
            } else {
                i = true
            }
            if (!i) {
                WH.debug("Nothing to add to the dressing room appearance history.");
                Data.appearanceHistory.setLastCombo(my.character.settings.race, my.character.settings.gender);
                return
            }
            Data.appearanceHistory.resetUndoState();
            let r = {};
            for (n in my.character.settings) {
                if (e.doNotSave.indexOf(n) > -1) {
                    continue
                }
                r[n] = my.character.settings[n]
            }
            let o = my.character.settings.race;
            let s = my.character.settings.gender;
            let a = Data.appearanceHistory.getHistory();
            a.entries[o] = a.entries[o] || {};
            a.entries[o][s] = a.entries[o][s] || [];
            a.entries[o][s].push(r);
            if (a.entries[o][s].length > e.maxLength) {
                a.entries[o][s] = a.entries[o][s].slice(Math.max(0, a.entries[o][s].length - e.maxLength))
            }
            WH.debug("Added", a, "to the dressing room appearance history.");
            LocalStorage.set(LocalStorage.KEY_WOW_DRESSING_ROOM_APPEARANCE_HISTORY, a);
            Data.appearanceHistory.setLastCombo(o, s);
            UpdateDisplay.appearanceHistorySettings()
        }
        ;
        this.setLastCombo = function(e, t) {
            let i = Data.appearanceHistory.getHistory();
            i.race = e;
            i.gender = t;
            LocalStorage.set(LocalStorage.KEY_WOW_DRESSING_ROOM_APPEARANCE_HISTORY, i)
        }
        ;
        this.getUndoState = function() {
            return t.undoState
        }
        ;
        this.resetUndoState = function() {
            t.undoState = 0
        }
        ;
        this.setUndoState = function(e) {
            let i = Data.appearanceHistory.getCurrentHistory();
            let n = i[i.length - 1 + e];
            if (!n) {
                return
            }
            t.undoState = e;
            Data.setCharacterSettings(n);
            Data.updateCharacter(my.character, true)
        }
    }
    ;
    const Action = new function() {
        this.appearanceRedo = function() {
            let e = Data.appearanceHistory.getUndoState();
            WH.debug("Redoing...", e);
            Data.appearanceHistory.setUndoState(e + 1);
            if (my.elements.redo.disabled) {
                WH.Tooltips.hide()
            }
        }
        ;
        this.appearanceUndo = function() {
            let e = Data.appearanceHistory.getUndoState();
            WH.debug("Undoing...", e);
            Data.appearanceHistory.setUndoState(e - 1);
            if (my.elements.undo.disabled) {
                WH.Tooltips.hide()
            }
        }
        ;
        this.doItemSearch = function(search) {
            let lv = my.pickerListviews[Data.getSelectedPickerTabIndex()];
            let listviewData = [];
            my.previousSearch = search;
            lv.setData(listviewData);
            $(my.elements.pickerWarning).hide();
            WH.Tooltips.hide();
            if (!search.name && !search.armorType && !search.mainHandType && !search.offHandType && !search.rangedType && !search.source && !search.style && !search.expansion) {
                return
            }
            WH.displayInline(my.elements.loadingIndicator);
            let url = WH.Url.generatePath("/search") + "?q=" + WH.urlEncode(search.name) + "&json&forTransmog&type=" + search.searchType;
            if (search.style && Data.styleFilterApplies()) {
                url += "&style=" + search.style
            }
            if (search.source && Data.sourceFilterApplies()) {
                url += "&source=" + search.source
            }
            if (search.armorType && Data.armorTypeFilterApplies()) {
                url += "&catg=4&subcatg=" + search.armorType
            }
            if (search.mainHandType && Data.mainHandTypeFilterApplies()) {
                url += "&catg=2&subcatg=" + search.mainHandType
            }
            if (search.offHandType && Data.offHandTypeFilterApplies()) {
                if (search.offHandType > OFFHAND_ARMOR_OFFSET * .9) {
                    url += "&catg=4&subcatg=" + (search.offHandType - OFFHAND_ARMOR_OFFSET)
                } else {
                    url += "&catg=2&subcatg=" + search.offHandType
                }
            }
            if (search.rangedType && Data.rangedTypeFilterApplies()) {
                url += "&catg=2&subcatg=" + search.rangedType
            }
            if (search.expansion && Data.expansionFilterApplies()) {
                url += "&expansion=" + search.expansion
            }
            if (search.slot != null) {
                url += "&slot=" + search.slot
            }
            new Ajax(Url.generatePath(url),{
                method: "POST",
                searchName: search.name,
                onSuccess: function(xhr, opt) {
                    WH.displayNone(my.elements.loadingIndicator);
                    let text = xhr.responseText;
                    if (text.charAt(0) !== "[" || text.charAt(text.length - 1) !== "]") {
                        return
                    }
                    let a = eval(text);
                    if (search.name === opt.searchName && a.length === 2) {
                        if (a[1].items) {
                            for (let e = 0, t = a[1].items.length; e < t; ++e) {
                                let t = {};
                                t.id = a[1].items[e].id;
                                t.name = t["name_" + Locale.getName()] = a[1].items[e].name;
                                t.quality = a[1].items[e].quality;
                                t.icon = a[1].items[e].icon;
                                t.level = a[1].items[e].level;
                                t.classs = a[1].items[e].classs;
                                t.subclass = a[1].items[e].subclass;
                                t.source = a[1].items[e].source;
                                t.sourcemore = a[1].items[e].sourcemore;
                                t.slot = a[1].items[e].slot;
                                t.jsonequip = WH.dO(a[1].items[e]);
                                t.appearances = a[1].items[e].appearances;
                                if (a[1].items[e].artifactappearances) {
                                    t.artifactappearances = a[1].items[e].artifactappearances
                                }
                                t.attainable = a[1].items[e].attainable;
                                t._type = WH.Types.ITEM;
                                g_items.add(a[1].items[e].id, $.extend(true, {}, t));
                                my.itemsRequested[t.id] = true;
                                t.bonuses = a[1].items[e].bonuses;
                                if (search.searchType === t._type) {
                                    listviewData.push(t)
                                }
                            }
                        }
                        if (a[1].itemsets) {
                            for (let e = 0, t = a[1].itemsets.length; e < t; ++e) {
                                let t = $.extend(true, {}, a[1].itemsets[e]);
                                t.name = t["name_" + Locale.getName()] = a[1].itemsets[e].name;
                                t.quality = a[1].itemsets[e].quality;
                                t._type = WH.Types.ITEM_SET;
                                if (search.searchType === t._type) {
                                    listviewData.push(t)
                                }
                            }
                        }
                        if (a[1].transmogsets) {
                            for (let e = 0, t = a[1].transmogsets.length; e < t; ++e) {
                                let t = $.extend(true, {}, a[1].transmogsets[e]);
                                t.name = t["name_" + Locale.getName()] = a[1].transmogsets[e].name;
                                t.quality = a[1].transmogsets[e].quality;
                                t._type = WH.Types.TRANSMOG_SET;
                                if (search.searchType === t._type) {
                                    listviewData.push(t)
                                }
                            }
                        }
                    }
                    lv.setData(listviewData);
                    if (listviewData.length >= 200) {
                        $(my.elements.pickerWarning).show()
                    }
                }
            })
        }
        ;
        this.onChangeAppearance = function(e, t, i, n) {
            let r = t[Menu.ITEM_CRUMB];
            let o = {};
            if (e === "race" || e === "gender") {
                let t = my.character.settings.race;
                let i = my.character.settings.gender;
                if (e === "race") {
                    t = r;
                    o.race = r
                } else if (e === "gender") {
                    i = r;
                    o.gender = r
                }
                o = Data.appearanceHistory.getLastByCombo(t, i) || Data.getRandomAppearanceSettings(t, i, my.character.settings["class"]);
                o.race = t;
                o.gender = i
            } else {
                o[e] = parseInt(r)
            }
            if (n === true) {
                my.lastCustomizationOption = e
            }
            Data.setCharacterSettings(o);
            Data.updateCharacter(my.character);
            if (i && i instanceof HTMLElement) {
                WH.st(i, t[Menu.ITEM_LABEL])
            }
        }
        ;
        this.onChangeArtifactAppearance = function(e, t) {
            my.character.settings[ARTIFACT_PROPERTIES[e]] = t;
            my.pendingSlotChanges.push(e);
            Data.updateCharacter(my.character)
        }
        ;
        this.onChangeCategory = function(e) {
            const t = e => {
                if (!e.dataset.iconActive) {
                    return
                }
                const t = e.dataset.active === "true" ? e.dataset.iconActive : e.dataset.iconInactive;
                e.tabIndex = -1;
                e.style.backgroundImage = `url("${t}")`
            }
            ;
            let i = my.elements.categoryControls.categories[my.category];
            if (i) {
                i.dataset.active = "false"
            }
            let n = my.elements.categoryControls.categorySwitchers[my.category];
            if (n) {
                n.dataset.active = "false";
                t(n)
            }
            if (e !== CATEGORY_GEAR && !my.elements.categoryControls.categories[e]) {
                WH.log('Category controls not found, falling back on "' + DEFAULT_CATEGORY + '".', e);
                e = DEFAULT_CATEGORY
            }
            if (e !== CATEGORY_GEAR) {
                my.elements.categoryControls.categories[e].dataset.active = "true"
            }
            const r = STATIC_DATA.conditionalCategories.find((e => e.category === my.category))?.model;
            const o = STATIC_DATA.conditionalCategories.find((t => t.category === e))?.model;
            const s = my.elements.categoryControls.categorySwitchers[e];
            s.dataset.active = "true";
            t(s);
            my.elements.character.dataset.category = STATIC_DATA.customizationCategories[e].slug;
            my.category = e;
            LocalStorage.set(LocalStorage.KEY_WOW_DRESSING_ROOM_LAST_CATEGORY, e);
            let a = Data.getCurrentDisplayId();
            const c = my.displayId !== a || r !== o;
            my.displayId = a;
            if (c) {
                if (Data.isDataLoaded()) {
                    Display.paperdoll()
                }
            }
        }
        ;
        this.onChangeFilter = function() {
            Action.onKeyUpItemSearch(0)
        }
        ;
        this.onChangePickerTab = function(e, t, i) {
            Tabs.onShow(t, i);
            setTimeout((function() {
                WH.safeFocus($("input:visible", e))
            }
            ), 10);
            let n = my.pickerListviews[t.index];
            if (n && i) {
                let e = my.pickerListviews[i.index];
                if (my.previousSearch.name) {
                    $(".picker-search", $(n.container)).val(my.previousSearch.name)
                }
                if (my.previousSearch.armorType) {
                    $(".filter-armortype select", $(n.container)).val(my.previousSearch.armorType)
                }
                if (my.previousSearch.mainHandType) {
                    $(".filter-mainhandtype select", $(n.container)).val(my.previousSearch.mainHandType)
                }
                if (my.previousSearch.offHandType) {
                    $(".filter-offhandtype select", $(n.container)).val(my.previousSearch.offHandType)
                }
                if (my.previousSearch.rangedType) {
                    $(".filter-rangedtype select", $(n.container)).val(my.previousSearch.rangedType)
                }
                if (my.previousSearch.source) {
                    $(".filter-source select", $(n.container)).val(my.previousSearch.source)
                }
                if (my.previousSearch.style) {
                    $(".filter-style select", $(n.container)).val(my.previousSearch.style)
                }
                if (my.previousSearch.expansion) {
                    $(".filter-expansion select", $(n.container)).val(my.previousSearch.expansion)
                }
                n.setData(e.data)
            }
            UpdateDisplay.filters(n)
        }
        ;
        this.onOptionKeyDown = function(e, t, i) {
            let n;
            switch (i.key) {
            case "ArrowDown":
                n = {
                    name: "next",
                    pseudoSelector: ""
                };
                break;
            case "ArrowLeft":
                i.preventDefault();
                i.stopPropagation();
                e();
                break;
            case "ArrowRight":
                i.preventDefault();
                i.stopPropagation();
                t();
                break;
            case "ArrowUp":
                n = {
                    name: "previous",
                    pseudoSelector: ":last-of-type"
                };
                break
            }
            if (n) {
                let e = WH.closest(this, "." + OPTION_WRAPPER_CLASS);
                if (!e) {
                    WH.error("Customization option controls are in an unknown parent.", this);
                    return
                }
                let t;
                let r = e[n.name + "Sibling"];
                if (r && r.classList && r.classList.contains(OPTION_WRAPPER_CLASS)) {
                    t = WH.qs('div[data-role="control"]', r)
                } else {
                    t = WH.qs("." + OPTION_WRAPPER_CLASS + n.pseudoSelector + ' div[data-role="control"]', e.parentNode)
                }
                if (t) {
                    i.preventDefault();
                    i.stopPropagation();
                    t.focus()
                } else {
                    WH.error("Customization option controls have no " + n.name + " sibling.", this)
                }
            }
        }
        ;
        this.onClickImport = function(e) {
            let t = [];
            let i = [];
            let n = g_user.lists || [];
            n.sort((function(e, t) {
                return WH.stringCompare(e.realm, t.realm) || WH.stringCompare(e.name, t.name)
            }
            ));
            let r = null;
            for (let e in n) {
                if (!n.hasOwnProperty(e)) {
                    continue
                }
                let o = n[e];
                let s = [];
                for (let e = 0; e < o.lists.length; ++e) {
                    let t = o.lists[e];
                    if (t.type != -1) {
                        continue
                    }
                    s.push([t.id, t.name, Action.onClickProfile.bind(this, o, t.id)])
                }
                let a = s.length > 1;
                if (s.length > 0) {
                    let e = {
                        className: o.mode != 1 || o.armory && !o.errcode ? "listmanager-mode" + o.mode : "q10",
                        tinyIcon: Race.getIcon(o.race, Gender.tryFrom(o.gender))
                    };
                    if (o.pinned) {
                        e.fontIcon = "thumb-tack"
                    }
                    let n = Menu.createItem({
                        crumb: o.id,
                        label: o.name,
                        url: !a ? Action.onClickProfile.bind(this, o, s[0][0]) : "javascript:",
                        submenu: a ? s : null,
                        options: e
                    });
                    if (o.mode == 1) {
                        if (r != o.realm) {
                            t.push([undefined, o.realm]);
                            r = o.realm
                        }
                        t.push(n)
                    } else {
                        i.push(n)
                    }
                }
            }
            i.sort((function(e, t) {
                return WH.stringCompare(e[1], t[1])
            }
            ));
            {
                let n = [["blizzard", WH.TERMS.loadFromBlizzard, my.characterLoader.ShowCharacterList.bind(my.characterLoader), null, {
                    tinyIcon: "mail_gmicon"
                }]];
                if (t.length) {
                    n.push(Menu.createItem({
                        label: WH.TERMS.loadFromProfiler,
                        crumb: "profiler",
                        submenu: t
                    }))
                }
                if (i.length) {
                    n.push(Menu.createItem({
                        label: WH.TERMS.loadFromCustomList,
                        crumb: "custom",
                        submenu: i
                    }))
                }
                n.push(Menu.createItem({
                    label: WH.TERMS.loadFromInGameLink_ellipsis,
                    crumb: "ingame",
                    url: function() {
                        Dialog.prompt(Action.onImportGameLink.bind(this), {
                            label: WH.TERMS.inGameLink,
                            title: WH.TERMS.import
                        })
                    }
                }));
                Menu.show(n, e)
            }
        }
        ;
        this.onClickNextChoice = function(e, t, i) {
            let n = my.character.settings[i];
            let r = findMenuIndexByName(t, n) || 0;
            let o = r + 1;
            if (o >= t.length) {
                o = 0
            }
            if (typeof t[o][Menu.ITEM_URL] === "function") {
                t[o][Menu.ITEM_URL]()
            } else {
                WH.error("Cannot change the option choice because it has no action.", i, t[o][Menu.ITEM_CRUMB])
            }
            e.focus()
        }
        ;
        this.onClickPrevChoice = function(e, t, i) {
            let n = my.character.settings[i];
            let r = findMenuIndexByName(t, n) || 0;
            let o = r - 1;
            if (o < 0) {
                o = t.length - 1
            }
            if (typeof t[o][Menu.ITEM_URL] === "function") {
                t[o][Menu.ITEM_URL]()
            } else {
                WH.error("Failed to change option.", i, t[o][Menu.ITEM_CRUMB])
            }
            e.focus()
        }
        ;
        this.onClickProfile = function(e, t) {
            my.elements.importControl.dataset.importing = "true";
            $.ajax({
                success: function(t) {
                    Data.setProfile(e, t)
                },
                url: Url.generatePath(`/list=${e.id}&tab=${t}&json&c=${e.updated.replace(/\D/g, "")}`)
            })
        }
        ;
        this.onClickSave = function() {
            if (!User.isLoggedIn()) {
                let e = location.pathname + location.search + location.hash;
                new WH.Highlight("dressing-room-highlight",this,WH.ct(WH.TERMS.mustbeloggedintousefeature_tip),{
                    buttonSize: "small",
                    class: "",
                    closeButtonText: WH.TERMS.cancel,
                    extraButtons: [{
                        text: WH.TERMS.login,
                        url: Url.getLoginPath(e)
                    }, {
                        text: WH.TERMS.register,
                        url: Url.getRegistrationPath()
                    }],
                    position: "top",
                    useLocalStorage: false
                });
                return
            }
            Action.saveToOutfit()
        }
        ;
        this.onClickTransmog = function() {
            Action.saveToTransmog()
        }
        ;
        this.onImportGameLink = function(e) {
            if (!e) {
                return
            }
            let t = e.match(/\bv1\s+(\d+(?:,(?:\d+|-1)){16})/);
            if (!t) {
                t = e.match(/\|Houtfit:([^|]{51})\|h/);
                if (!t) {
                    alert(WH.TERMS.unrecognizedFormat_tip);
                    return
                }
                let i = Data.parseOutfitLinkHash(t[1]);
                t = ["", [i[0], i[1], i[16], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10], i[11], -1, i[14], i[12], i[15]].join(",")]
            }
            let i = t[1].split(",").map((e => parseInt(e)));
            let n = {
                0: Wow.INVENTORY_SLOT_HEAD,
                1: Wow.INVENTORY_SLOT_SHOULDERS,
                2: Paperdoll.INVENTORY_SLOT_SHOULDER_2,
                3: Wow.INVENTORY_SLOT_BACK,
                4: Wow.INVENTORY_SLOT_CHEST,
                5: Wow.INVENTORY_SLOT_SHIRT,
                6: Wow.INVENTORY_SLOT_TABARD,
                7: Wow.INVENTORY_SLOT_WRISTS,
                8: Wow.INVENTORY_SLOT_HANDS,
                9: Wow.INVENTORY_SLOT_WAIST,
                10: Wow.INVENTORY_SLOT_LEGS,
                11: Wow.INVENTORY_SLOT_FEET,
                12: Wow.INVENTORY_SLOT_MAIN_HAND,
                15: Wow.INVENTORY_SLOT_OFF_HAND
            };
            let r = 2;
            let o = {};
            o[Wow.INVENTORY_SLOT_MAIN_HAND] = 14;
            o[Wow.INVENTORY_SLOT_OFF_HAND] = 16;
            let s = Object.keys(n).map((e => parseInt(e))).filter((e => i[e]));
            let a = s.map((e => i[e]));
            my.elements.importControl.dataset.importing = "true";
            WH.fetch(Url.generatePath("/dressing-room/mod-lookup"), {
                json: {
                    ids: a
                },
                success: e => {
                    if (CAN_USE_SEPARATE_SHOULDERS) {
                        let t = !!e[i[r]];
                        if (t !== my.elements.separateShouldersCheckbox.checked) {
                            my.elements.separateShouldersCheckbox.dispatchEvent(new MouseEvent("click"))
                        }
                    }
                    let t = [];
                    s.filter((t => e[i[t]])).forEach((r => {
                        let s = e[i[r]];
                        if (HIDDEN_ITEMS.includes(s.item)) {
                            return
                        }
                        let a = {
                            itemId: s.item,
                            appearanceMod: s.mod,
                            slotId: n[r]
                        };
                        if (o.hasOwnProperty(a.slotId)) {
                            let e = i[o[a.slotId]];
                            if (e) {
                                let t = STATIC_DATA.itemEnchants[e];
                                if (t) {
                                    a.enchantVisual = t.visual
                                }
                            }
                        }
                        t.push(a)
                    }
                    ));
                    Data.equipItems(t);
                    delete my.elements.importControl.dataset.importing
                }
                ,
                error: () => {
                    alert(WH.TERMS.internalerror_tip);
                    delete my.elements.importControl.dataset.importing
                }
            })
        }
        ;
        this.onKeyDown = function(e) {
            if (document.activeElement && (document.activeElement.tagName === "TEXTAREA" || document.activeElement.tagName === "INPUT" && (document.activeElement.type || "text") === "text") || Lightbox.isVisible()) {
                return
            }
            if (e.key === "z" && !e.ctrlKey && e.altKey) {
                e.preventDefault();
                Action.toggleUi()
            } else if (e.key === "Escape" && !e.ctrlKey && !e.altKey && !e.shiftKey) {
                e.preventDefault();
                if (my.hideUi) {
                    Action.toggleUi()
                } else {
                    Action.resetModelPosition()
                }
            } else if (e.ctrlKey && !e.altKey) {
                const t = {
                    l: my.characterLoader.ShowCharacterList,
                    p: Action.togglePause,
                    s: Action.onClickSave,
                    y: Action.appearanceRedo,
                    Z: Action.appearanceRedo,
                    z: Action.appearanceUndo
                };
                if (t[e.key]) {
                    e.preventDefault();
                    t[e.key]()
                }
            }
        }
        ;
        this.onKeyDownItemSearch = function(e) {
            let t = my.pickerListviews[Data.getSelectedPickerTabIndex()];
            t.submitSearch(e)
        }
        ;
        this.onKeyUpItemSearch = function(e) {
            let t = my.pickerListviews[Data.getSelectedPickerTabIndex()];
            let i = {
                name: $(".picker-search", $(t.container)).val().replace(/\s+/g, " ").trim(),
                armorType: $(".filter-armortype select", $(t.container)).val(),
                mainHandType: $(".filter-mainhandtype select", $(t.container)).val(),
                offHandType: $(".filter-offhandtype  select", $(t.container)).val(),
                rangedType: $(".filter-rangedtype  select", $(t.container)).val(),
                source: $(".filter-source select", $(t.container)).val(),
                style: $(".filter-style select", $(t.container)).val(),
                expansion: $(".filter-expansion select", $(t.container)).val()
            };
            if (Object.values(i).join("") === "") {
                i.expansion = Expansion.get();
                if (i.expansion === Expansion.SL && my.searchType === Types.ITEM && my.pickerEquipSlot === Item.INVENTORY_TYPE_SHIRT) {
                    i.expansion = Expansion.BFA
                }
            }
            i.searchType = my.searchType;
            i.slot = my.pickerSearchSlot;
            if (JSON.stringify(my.previousSearch) === JSON.stringify(i)) {
                return
            }
            if (isNaN(e)) {
                e = 250
            }
            if (my.searchTimer) {
                clearTimeout(my.searchTimer);
                delete my.searchTimer
            }
            my.searchTimer = setTimeout(Action.doItemSearch.bind(this, i), e)
        }
        ;
        this.onShowPicker = function(e, t, i) {
            Display.picker(e, t, i)
        }
        ;
        this.openPicker = function(e, t) {
            my.searchType = e;
            my.pickerEquipSlot = t;
            my.pickerSearchSlot = t;
            if (t === Paperdoll.INVENTORY_SLOT_SHOULDER_2) {
                my.pickerSearchSlot = Wow.INVENTORY_SLOT_SHOULDERS
            }
            Lightbox.show("picker", {
                onShow: Action.onShowPicker
            })
        }
        ;
        this.randomizeAppearance = function() {
            let e = Data.getRandomAppearanceSettings(my.character.settings.race, my.character.settings.gender, my.character.settings["class"]);
            Data.setCharacterSettings(e);
            Data.updateCharacter(my.character)
        }
        ;
        this.resetModelPosition = function() {
            my.paperdoll.viewer.renderer.azimuth = Math.PI * 1.5;
            my.paperdoll.viewer.renderer.zenith = Math.PI / 2;
            let e = Data.getPaperdollModelOptions();
            my.paperdoll.setZoom(e.zoom);
            my.paperdoll.setOffset(e.offset)
        }
        ;
        this.saveToOutfit = function() {
            let e = my.character.equipment;
            let t, i, n, r, o;
            o = $.extend({}, my.character.settings);
            o.armortype = 0;
            let s = ModelViewer.getSheathTypes((my.character.equipment[SLOT_MAIN_HAND] || {}).itemId, (my.character.equipment[SLOT_OFF_HAND] || {}).itemId);
            o.mainHandSheath = o.sheathed ? s.mainhand : ModelViewer.UNSHEATHED_DEFAULT;
            o.offHandSheath = o.sheathed ? s.offhand : ModelViewer.UNSHEATHED_DEFAULT;
            let a = {
                top: false,
                bottom: false
            };
            if (my.character.settings.gender == 0) {
                a.top = true
            }
            for (let s in PAPERDOLL_SLOTS) {
                if (!PAPERDOLL_SLOTS.hasOwnProperty(s) || !e.hasOwnProperty(s) || !e[s].hasOwnProperty("itemId") || e[s].itemId == 0) {
                    continue
                }
                t = PAPERDOLL_SLOTS[s];
                if (!OUTFIT_SLOT_NAMES.hasOwnProperty(t)) {
                    continue
                }
                i = e[s].itemId;
                let c = Gatherer.get(WH.Types.ITEM, i);
                if (!c) {
                    continue
                }
                let l = c.json || c.jsonequip;
                if (o.armortype !== false && Item.isBodyArmor(l.classs, l.subclass)) {
                    if (o.armortype === 0) {
                        o.armortype = l.subclass
                    } else if (o.armortype !== l.subclass) {
                        o.armortype = false
                    }
                }
                n = c.jsonequip.displayid;
                r = g_items.getAppearance(i, e[s].itemBonus ? [e[s].itemBonus] : [], c.quality === WH.Wow.Item.QUALITY_ARTIFACT ? my.character.settings[ARTIFACT_PROPERTIES[t]] : null);
                if (r != null && r[0]) {
                    n = r[0]
                }
                o[OUTFIT_SLOT_NAMES[t]] = n;
                switch (OUTFIT_SLOT_NAMES[t]) {
                case "shirt":
                case "tabard":
                case "chest":
                    a.top = true;
                    a.bottom |= c.jsonequip.slotbak == WH.Wow.Item.INVENTORY_TYPE_ROBE;
                    break;
                case "legs":
                    a.bottom = true;
                    break
                }
            }
            o.separateShoulders = my.character.settings.separateShoulders;
            if (o.armortype === false) {
                o.armortype = 0
            }
            if (!a.top || !a.bottom) {
                alert(WH.TERMS.needsmoreclothes_tip);
                return false
            }
            if (my.character.settings.mount) {
                alert(WH.TERMS.removemounttosaveoutfit_tip);
                return false
            }
            let c = new Dialog;
            c.show("createoutfit", {
                data: o,
                onSubmit: function(e) {
                    WH.fetch(Url.generatePath("/outfit/create"), {
                        json: e,
                        success: function(e) {
                            let t = $("#announcement-0").empty().offset().top;
                            if ($(document).scrollTop() > t) {
                                $("body").animate({
                                    scrollTop: t
                                }, 1e3)
                            }
                            new WH.Announcement({
                                parent: "announcement-0",
                                text: '[span class="listmanager-announcement"][span class="icon-star"][/span]' + WH.sprintf(WH.TERMS.savedoutfit_format, '[url="' + e.url + '"]' + e.name.replace("[", "\\[") + "[/url]") + "[/span]",
                                style: "",
                                nocookie: 1,
                                id: "outfit-" + e.id
                            })
                        }
                    })
                }
            })
        }
        ;
        this.saveToTransmog = function() {
            let e = new Dialog;
            e.show("createOrReplaceTransmogSet", {
                data: {
                    act: "create"
                },
                onSubmit: function(e) {
                    switch (e.act[0]) {
                    case "create":
                        requestAnimationFrame(Action.saveToTransmogNew);
                        break;
                    case "replace":
                        let t = parseInt(e.replaceId);
                        WH.fetch(Url.generatePath(`/admin/transmog-set/lookup?id=${t}`), {
                            success: function(e) {
                                WH.Gatherer.addData(WH.Types.TRANSMOG_SET, WH.getDataEnv(), e.gatherer);
                                Action.saveToTransmogExisting(e.data)
                            },
                            error: function(e) {
                                alert(e.error || "Could not fetch data for ID " + t)
                            }
                        });
                        break;
                    default:
                        alert("Could not determine which save action to take.");
                        return false
                    }
                    return true
                }
            })
        }
        ;
        this.saveToTransmogExisting = function(e) {
            let t = new Dialog;
            t.show("saveTransmogSet", {
                data: {
                    setId: e.id,
                    name: e.name,
                    armorType: e.armorType,
                    quality: e.quality,
                    note: e.note,
                    tags: Object.keys(e.tags)
                },
                onSubmit: function(t) {
                    let i = {
                        id: e.id,
                        name: t.name.trim(),
                        armorType: t.armorType,
                        quality: t.quality,
                        note: t.note,
                        tags: {},
                        displays: []
                    };
                    t.tags.forEach((function(e) {
                        i.tags[e] = true
                    }
                    ));
                    let n = my.character.equipment;
                    for (let e in PAPERDOLL_SLOTS) {
                        if (!PAPERDOLL_SLOTS.hasOwnProperty(e) || !n.hasOwnProperty(e) || !n[e].hasOwnProperty("itemId") || n[e].itemId == 0) {
                            continue
                        }
                        let t = PAPERDOLL_SLOTS[e];
                        let r = n[e].itemId;
                        let o = Gatherer.get(WH.Types.ITEM, r);
                        if (!o) {
                            continue
                        }
                        let s = (o.jsonequip || {}).displayid;
                        let a = g_items.getAppearance(r, n[e].itemBonus ? [n[e].itemBonus] : [], o.quality === WH.Wow.Item.QUALITY_ARTIFACT ? my.character.settings[ARTIFACT_PROPERTIES[t]] : null);
                        if (a != null && a[0]) {
                            s = a[0]
                        }
                        let c = {
                            slot: t,
                            inventoryType: (o.json || {}).slotbak || (o.jsonequip || {}).slotbak,
                            display: s
                        };
                        if (!c.slot) {
                            alert("Could not determine slot ID for " + e);
                            return false
                        }
                        if (!c.inventoryType) {
                            alert("Could not determine inventory type for item " + r);
                            return false
                        }
                        if (!c.display) {
                            alert("Could not determine display ID for item " + r);
                            return false
                        }
                        i.displays.push(c)
                    }
                    WH.fetch(Url.generatePath("/admin/transmog-set/upsert"), {
                        json: i,
                        success: function(e) {
                            let t = $("#announcement-0").empty().offset().top;
                            if ($(document).scrollTop() > t) {
                                $("body").animate({
                                    scrollTop: t
                                }, 1e3)
                            }
                            new WH.Announcement({
                                parent: "announcement-0",
                                text: '[span class="listmanager-announcement"][span class="icon-star"][/span]' + WH.Strings.sprintf("Created/updated transmog set %d [url=%s]%s[/url]", e.id, WH.Entity.getUrl(WH.Types.TRANSMOG_SET, e.id), i.name.replace("[", "\\[")) + "[/span]",
                                style: "",
                                nocookie: 1,
                                id: "transmog-update-" + e.id
                            })
                        },
                        error: function(e) {
                            alert("Failed to save transmog set.")
                        }
                    });
                    return true
                }
            })
        }
        ;
        this.saveToTransmogNew = function() {
            let e = 0;
            let t = my.character.equipment;
            for (let i in PAPERDOLL_SLOTS) {
                if (!PAPERDOLL_SLOTS.hasOwnProperty(i) || !t.hasOwnProperty(i) || !t[i].hasOwnProperty("itemId") || t[i].itemId == 0) {
                    continue
                }
                let n = Gatherer.get(WH.Types.ITEM, t[i].itemId);
                if (!n) {
                    continue
                }
                let r = n.json || n.jsonequip;
                if (Item.isBodyArmor(r.classs, r.subclass)) {
                    if (e === 0) {
                        e = r.subclass
                    } else if (e !== r.subclass) {
                        e = 0;
                        break
                    }
                }
            }
            Action.saveToTransmogExisting({
                id: null,
                armorType: e,
                name: "",
                note: 0,
                quality: Item.QUALITY_EPIC,
                tags: {}
            })
        }
        ;
        this.selectPickerData = function(e) {
            Lightbox.hide();
            switch (e._type) {
            case WH.Types.ITEM_SET:
                if (e.pieces && e.pieces.length) {
                    for (let t in e.pieces) {
                        if (e.pieces.hasOwnProperty(t) && g_items[e.pieces[t]]) {
                            let i = $.extend(true, {}, g_items[e.pieces[t]]);
                            i.bonuses = e.bonuses;
                            Data.equipItem(null, i)
                        }
                    }
                    my.lastSetName = e.name
                }
                break;
            case WH.Types.TRANSMOG_SET:
                if (e.pieces && e.pieces.length) {
                    for (let t in e.pieces) {
                        if (e.pieces.hasOwnProperty(t) && g_items[e.pieces[t]]) {
                            let i = $.extend(true, {}, g_items[e.pieces[t]]);
                            i.bonuses = e.pcbonus[t];
                            Data.equipItem(null, i)
                        }
                    }
                    my.lastSetName = e.name
                }
                break;
            case WH.Types.ITEM:
                Data.equipItem(my.pickerEquipSlot, e);
                break;
            case self.ENCHANT_SEARCH_TYPE:
                Data.equipEnchant(my.pickerEquipSlot, e.id);
                break
            }
            Data.updateCharacter(my.character)
        }
        ;
        this.toggleNpcOptions = function() {
            if (WH.User.hasRole(U_GROUP_EMPLOYEE)) {
                if (!this.checked) {
                    let e = WH.closest(this, "." + OPTION_WRAPPER_CLASS);
                    if (my.otherRequirementTypesAllNpc) {
                        my.otherRequirementTypesAllNpc = false;
                        e.classList.remove("q5")
                    } else {
                        this.checked = true;
                        my.otherRequirementTypesAllNpc = true;
                        e.classList.add("q5")
                    }
                } else {}
            }
            my.character.settings.npcOptions = this.checked ? 1 : 0;
            my.character = Data.validateNpcOptions(my.character);
            my.lastCustomizationOption = "npc-options";
            UpdateDisplay.characterSettings();
            Data.updateCharacter(my.character)
        }
        ;
        this.togglePause = function() {
            if (my.pauseButton.getElement().dataset.paused === "true") {
                UpdateDisplay.setViewerPause(false);
                delete my.pauseButton.getElement().dataset.paused;
                my.pauseButton.updateText(WH.TERMS.pause)
            } else {
                UpdateDisplay.setViewerPause(true);
                my.pauseButton.getElement().dataset.paused = "true";
                my.pauseButton.updateText(WH.TERMS.play)
            }
        }
        ;
        this.toggleUi = function() {
            my.hideUi = !my.hideUi;
            my.elements.character.dataset.hideUi = JSON.stringify(my.hideUi);
            my.toggleUiButton && my.hideUi ? my.toggleUiButton.updateText(WH.TERMS.showUi) : my.toggleUiButton.updateText(WH.TERMS.hideUi)
        }
        ;
        this.unequipItem = function(e) {
            Data.equipItem(e, null);
            Data.updateCharacter(my.character)
        }
        ;
        this.validateModelWheelEvent = function(e) {
            e = e.originalEvent || e;
            if (my.paperdollResponsiveShell) {
                let t = my.paperdollResponsiveShell.getBoundingClientRect();
                return e.pageX > t.left && e.pageX < t.left + t.width && e.pageY > t.top && e.pageY < t.top + t.height
            }
            return false
        }
        ;
        function findMenuIndexByName(e, t) {
            for (let i = 0; i < e.length; i++) {
                if (e[i][Menu.ITEM_CRUMB] === t) {
                    return i
                }
            }
        }
    }
}
;
Listview.templates.picker = {
    sort: [1],
    nItemsPerPage: -1,
    hideBands: 2,
    hideNav: 1 | 2,
    hideHeader: 1,
    searchable: 1,
    searchDelay: 100,
    hash: Listview.HASH_DISABLED,
    filtrable: 0,
    forceBandTop: 1,
    clip: {
        w: 780,
        h: 486
    },
    onSearchSubmit: function(e) {
        if (this.nRowsVisible != 2) {
            return
        }
        this.selectData(e)
    },
    columns: [{
        id: "item",
        type: "text",
        align: "left",
        value: "name",
        name: WH.TERMS.name,
        span: 2,
        compute: function(e, t, i) {
            const n = WH.Wow.Item;
            let r = WH.ce("a");
            r.className = "q" + e.quality + " listview-cleartext";
            let o = WH.ce("div");
            switch (e._type) {
            case WH.Types.ITEM:
                let s = WH.applyStatModifications(e.jsonequip, null, null, null, e.bonuses);
                this.template.columns[0].span = 2;
                let a = WH.ce("td");
                a.style.width = "1px";
                a.style.paddingRight = "0";
                a.style.borderRight = "none";
                let c = g_items.createIcon(e.id, 0, 0, 0, e.bonuses);
                let l = WH.Icon.getLink(c);
                WH.ae(a, c);
                WH.ae(i, a);
                t.style.borderLeft = "none";
                l.onclick = WH.rf;
                r.href = Listview.funcBox.getItemUrl.call(this, e);
                WH.ae(o, r);
                let u = WH.ce("div");
                u.className = "listview-name-info";
                let m = WH.ce("span");
                m.className = "q2";
                if (s.namedesc) {
                    m.innerHTML = s.namedesc
                }
                if (!$(m).is(":empty")) {
                    WH.ae(u, m)
                }
                WH.aef(o, u);
                WH.ae(r, WH.ct(e.name + (!s.nameSuffix ? "" : " " + s.nameSuffix)));
                let d = e.flags2 ? e.flags2 : e.jsonequip.flags2;
                if (d & n.FLAGS2_APPEARANCE_UNCOLLECTIBLE && WH.Wow.Expansion.available(WH.Wow.Expansion.CATA)) {
                    let e = WH.ce("div");
                    e.className = "small2";
                    WH.ae(e, WH.ct(WH.TERMS.appearanceUncollectible_tip));
                    WH.ae(o, e)
                }
                break;
            case WH.Types.ITEM_SET:
                r.href = WH.Entity.getUrl(e._type, e.id, e.name);
                WH.ae(o, r);
                WH.ae(r, WH.ct(e.name));
                break;
            case WH.Types.TRANSMOG_SET:
                r.href = WH.Entity.getUrl(e._type, e.id, e.name);
                WH.ae(o, r);
                WH.ae(r, WH.ct(e.name));
                if (e.note || e._note) {
                    let t = WH.ce("div");
                    t.className = "small";
                    if (e.note) {
                        WH.ae(t, WH.ct(e.note))
                    } else {
                        WH.ae(t, WH.ct(WH.Wow.ItemSet.getNote(e._note) || ""))
                    }
                    WH.ae(o, t)
                }
                break;
            case WH.Wow.DressingRoom.ENCHANT_SEARCH_TYPE:
                this.template.columns[0].span = 2;
                let p = WH.ce("td", {
                    style: {
                        width: "1px",
                        paddingRight: "0",
                        borderRight: "none"
                    }
                });
                WH.ae(i, p);
                t.style.borderLeft = "none";
                WH.st(o, e.name);
                if (e.id) {
                    WH.ae(p, WH.Icon.create(e.icon || "inv_scroll_05", WH.Icon.SMALL));
                    o.classList.add("q1")
                }
                break
            }
            WH.noWrap(t);
            WH.ae(t, o);
            if (this.id !== "summary") {
                $(i).click(function(e, t) {
                    t.preventDefault();
                    this.selectData(e)
                }
                .bind(this, e))
            }
        },
        sortFunc: function(e, t) {
            return -WH.stringCompare(e.quality == WH.Wow.Item.QUALITY_ARTIFACT ? 1 : 0, t.quality == WH.Wow.Item.QUALITY_ARTIFACT ? 1 : 0) || -WH.stringCompare(Listview.funcBox.getItemLevelWithBonuses(e) | e.minlevel, Listview.funcBox.getItemLevelWithBonuses(t) | t.minlevel) || -WH.stringCompare(e.quality, t.quality) || WH.stringCompare(e.name, t.name)
        }
    }, {
        id: "level",
        name: WH.TERMS.level,
        type: "range",
        getMinValue: function(e) {
            return e.minlevel | Listview.funcBox.getItemLevelWithBonuses(e)
        },
        getMaxValue: function(e) {
            return e.maxlevel | Listview.funcBox.getItemLevelWithBonuses(e)
        },
        compute: function(e, t, i) {
            switch (e._type) {
            case WH.Types.ITEM:
                return Listview.funcBox.getItemLevelWithBonuses(e);
            case WH.Types.ITEM_SET:
            case WH.Types.TRANSMOG_SET:
                if (e.minlevel > 0 && e.maxlevel > 0) {
                    if (e.minlevel != e.maxlevel) {
                        return e.minlevel + WH.TERMS.hyphen_punct + e.maxlevel
                    } else {
                        return e.minlevel
                    }
                }
                return -1
            }
        }
    }, {
        id: "pieces",
        name: WH.TERMS.pieces,
        getValue: function(e) {
            return e.pieces ? e.pieces.length : null
        },
        compute: function(e, t) {
            if (!e.pieces || !e.pieces.length) {
                return
            }
            t.style.padding = "0";
            let i = Listview.funcBox.getCurrentItemBonuses(e);
            let n;
            if (i.length > 0) {
                n = {
                    bonus: i.join(":")
                }
            }
            let r = [];
            for (let t = 0; t < e.pieces.length; ++t) {
                let o = e.pieces[t];
                if (e._type === WH.Types.TRANSMOG_SET) {
                    i = e.pcbonus ? e.pcbonus[t] : [];
                    if (i.length > 0) {
                        n = {
                            bonus: i.join(":")
                        }
                    }
                }
                r.push({
                    0: g_items.getIcon(o, i),
                    1: 1,
                    2: WH.Entity.getUrl(WH.Types.ITEM, o, undefined, n)
                })
            }
            Listview.funcBox.createCenteredIcons(r, t)
        }
    }, {
        id: "slot",
        name: WH.TERMS.slot,
        type: "text",
        compute: function(e, t) {
            WH.noWrap(t);
            return WH.Wow.Item.getInvTypeName(e.slot)
        },
        getVisibleText: function(e) {
            return WH.Wow.Item.getInvTypeName(e.slot)
        },
        sortFunc: function(e, t) {
            return WH.Wow.PAPERDOLL_SLOT_ORDER.indexOf(WH.Wow.Item.getInvTypeSlots(e.slot)[0]) - WH.Wow.PAPERDOLL_SLOT_ORDER.indexOf(WH.Wow.Item.getInvTypeSlots(t.slot)[0])
        }
    }, {
        id: "type",
        name: WH.TERMS.type,
        type: "text",
        compute: function(e, t, i) {
            t.className = "small q1";
            WH.noWrap(t);
            let n = WH.ce("a");
            let r = "";
            switch (e._type) {
            case WH.Types.ITEM:
                let t = WH.Wow.Item.getTypeNameAndUrl(e.classs ? e.classs : e["class"], e.subclass, e.subsubclass);
                n.href = t.url;
                r = t.text;
                break;
            case WH.Types.TRANSMOG_SET:
                r = e.armorType ? WH.Wow.ItemSet.getTypeName(e.armorType) : "???";
                break;
            case WH.Types.ITEM_SET:
                r = WH.Wow.ItemSet.getTypeName(e.type);
                break
            }
            WH.ae(n, WH.ct(r));
            WH.ae(t, n)
        },
        getVisibleText: function(e) {
            return WH.Wow.Item.getTypeNameAndUrl(e.classs, e.subclass, e.subsubclass).text
        }
    }, {
        id: "source",
        name: WH.TERMS.source,
        type: "text",
        compute: function(e, t) {
            if (e.attainable) {
                return WH.TERMS.unavailable
            } else if (e.source != null) {
                if (e.source.length == 1) {
                    WH.noWrap(t);
                    let i = e.sourcemore ? e.sourcemore[0] : {};
                    if (i.t) {
                        let e = WH.ce("a");
                        if (i.q != null) {
                            e.className = "q" + i.q
                        } else {
                            e.className = "q1"
                        }
                        e.href = WH.Entity.getUrl(i.t, i.ti);
                        e.style.whiteSpace = "nowrap";
                        if (i.icon) {
                            e.className += " icontiny tinyspecial";
                            e.style.backgroundImage = 'url("' + WH.Icon.getIconUrl(i.icon, WH.Icon.TINY) + '")'
                        }
                        WH.ae(e, WH.ct(i.n));
                        WH.ae(t, e)
                    } else {
                        WH.ae(t, WH.ct(WH.Wow.Item.getSourceCategory(e.source[0], i)))
                    }
                    let n = WH.Wow.Item.getSourceDescription(e.source[0], i);
                    if (n != null) {
                        let e = WH.ce("div");
                        e.className = "small2";
                        if (n.pretext) {
                            WH.ae(e, WH.ct(n.pretext))
                        }
                        if (n.url) {
                            let t = WH.ce("a");
                            t.className = "q1";
                            t.href = n.url;
                            WH.ae(t, WH.ct(n.text));
                            WH.ae(e, t)
                        } else {
                            WH.ae(e, WH.ct(n.text))
                        }
                        if (n.posttext) {
                            WH.ae(e, WH.ct(n.posttext))
                        }
                        WH.ae(t, e)
                    }
                } else {
                    let t = "";
                    for (let i = 0, n = e.source.length; i < n; ++i) {
                        if (i > 0) {
                            t += WH.TERMS.comma_punct
                        }
                        t += WH.Wow.getSourceName(e.source[i])
                    }
                    return t
                }
            }
        },
        getVisibleText: function(e) {
            if (e.attainable) {
                return WH.TERMS.unavailable
            } else if (e.source != null) {
                if (e.source.length == 1) {
                    let t = "";
                    let i = e.sourcemore ? e.sourcemore[0] : {};
                    if (i.t) {
                        t += " " + i.n
                    } else {
                        t += " " + WH.Wow.Item.getSourceCategory(e.source[0], i)
                    }
                    let n = WH.Wow.Item.getSourceDescription(e.source[0], i);
                    if (n != null) {
                        if (n.pretext) {
                            t += " " + n.pretext
                        }
                        t += " " + n.text;
                        if (n.posttext) {
                            t += " " + n.posttext
                        }
                    }
                    return t
                } else {
                    return Listview.funcBox.arrayText(e.source, WH.Wow.getSources())
                }
            }
        },
        sortFunc: function(e, t) {
            let i = Listview.funcBox.assocArrCmp(e.source, t.source, WH.Wow.getSources());
            if (i != 0) {
                return i
            }
            return WH.stringCompare(e.sourcemore && e.source.length === 1 ? e.sourcemore[0].n : null, t.sourcemore && t.source.length === 1 ? t.sourcemore[0].n : null)
        }
    }]
};
Listview.templates.pickergallery = {
    sort: [1],
    mode: Listview.MODE_TILED,
    nItemsPerPage: -1,
    hideBands: 2,
    hideNav: 1 | 2,
    hideHeader: 1,
    searchable: 0,
    searchDelay: 100,
    hash: Listview.HASH_DISABLED,
    filtrable: 0,
    forceBandTop: 1,
    clip: {
        w: 780,
        h: 486
    },
    onSearchSubmit: function(e) {
        if (this.nRowsVisible != 2) {
            return
        }
        this.selectData(e)
    },
    columns: [],
    compute: function(e, t, i) {
        t.className = "screenshot-cell screenshot-cell-clickable";
        t.vAlign = "bottom";
        let n = WH.ce("a");
        n.click = WH.rf();
        let r;
        let o = WH.ce("img");
        switch (e._type) {
        case WH.Types.ITEM:
            n.href = WH.Entity.getUrl(e._type, e.id);
            let t = e.jsonequip.displayid;
            let i = Listview.funcBox.getCurrentItemBonuses.call(this, e);
            if (i.length) {
                n.href += "&bonus=" + i.join(":")
            }
            let s = g_items.getAppearance(e.id, i);
            if (s != null && s[0]) {
                t = s[0]
            }
            let a = WH.Gatherer.get(e._type, e.id);
            let c = a && a.jsonequip && a.jsonequip.races;
            r = WH.Wow.Models.getRaceIdFromMask(c);
            if (a.classs !== WH.Wow.Item.CLASS_ARMOR) {
                r = undefined
            }
            o.src = WH.Wow.Item.getThumbUrl(t, r);
            break;
        case WH.Types.TRANSMOG_SET:
            n.href = WH.Entity.getUrl(e._type, e.id);
            r = WH.Wow.DressingRoom.getTransmogRaceId(this.race);
            o.src = WH.Wow.TransmogSet.getThumbUrl(e.id, r, this.gender);
            o.style.width = "150px";
            o.style.height = "254px";
            o.style.maxHeight = "254px";
            break;
        case WH.Wow.DressingRoom.ENCHANT_SEARCH_TYPE:
            if (e.visual) {
                o.src = WH.Wow.ModelViewer.getContentPath(WH.getDataEnv()) + "webthumbs/itemvisual/" + e.visual + WH.WebP.getImageExtension()
            } else {
                o.style.visibility = "hidden"
            }
            o.style.width = "200px";
            o.style.height = "133px";
            break
        }
        WH.ae(n, o);
        WH.ae(t, n);
        let s = WH.ce("div");
        s.className = "screenshot-caption-wrapper";
        let a = WH.ce("div");
        a.className = "screenshot-caption";
        let c = WH.ce("span");
        let l = WH.sprintf("[color=q$1]$2[/color]", e.quality, e.name);
        c.appendChild(WH.markup.getDomFragment(l, {
            mode: WH.markup.MODE.ARTICLE
        }));
        WH.ae(a, c);
        WH.ae(s, a);
        WH.ae(t, s);
        $(t).click(function(e, t) {
            t.preventDefault();
            this.selectData(e)
        }
        .bind(this, e))
    },
    sortFunc: function(e, t) {
        return -WH.stringCompare(e.quality == WH.Wow.Item.QUALITY_ARTIFACT ? 1 : 0, t.quality == WH.Wow.Item.QUALITY_ARTIFACT ? 1 : 0) || -WH.stringCompare(Listview.funcBox.getItemLevelWithBonuses(e) | e.minlevel, Listview.funcBox.getItemLevelWithBonuses(t) | t.minlevel) || -WH.stringCompare(e.quality, t.quality) || WH.stringCompare(e.name, t.name)
    }
};
Dialog.templates.createoutfit = {
    title: WH.TERMS.saveasnewoutfit,
    width: 400,
    buttons: [["check", WH.TERMS.ok], ["x", WH.TERMS.cancel]],
    fields: [{
        id: "name",
        label: WH.TERMS.name_colon,
        type: "text",
        validate: e => {
            if (e.replace(/^\s*|\s*$/g, "").length < 4) {
                alert(WH.sprintf(WH.TERMS.replylength1_format, 4));
                return false
            }
            return true
        }
    }, {
        id: "style",
        label: WH.TERMS.style + WH.TERMS.colon_punct,
        type: "select",
        options: function() {
            let e = [WH.TERMS.none];
            let t = WH.getPageData("outfit.styles");
            for (let i = 1, n; n = t[i]; i++) {
                e.push(n)
            }
            return e
        }(),
        style: {
            padding: "6px 12px"
        }
    }]
};
Dialog.templates.createOrReplaceTransmogSet = {
    title: "Save Transmog Set",
    width: 400,
    buttons: [["check", WH.TERMS.ok], ["x", WH.TERMS.cancel]],
    fields: [{
        id: "act",
        type: "radio",
        options: {
            create: "Create New Set",
            replace: "Replace Existing Set"
        },
        onchange: function(e) {
            e.form.replaceId.disabled = e.value === "create"
        }
    }, {
        id: "replaceId",
        type: "text",
        disabled: true,
        placeholder: "Transmog Set ID",
        validate: function(e, t, i) {
            if (i.replaceId.disabled) {
                return true
            }
            if (!/^\d+$/.test(e)) {
                alert("Supply the numeric ID of the transmog set to replace.");
                i.replaceId.focus();
                return false
            }
            return true
        }
    }]
};
Dialog.templates.saveTransmogSet = {
    title: "Save Transmog Set",
    width: 600,
    buttons: [["check", WH.TERMS.ok], ["x", WH.TERMS.cancel]],
    fields: [{
        id: "setId",
        type: "caption",
        compute: function(e, t, i, n) {
            if (t) {
                WH.ae(n, WH.ct(t + ": "));
                WH.ae(n, WH.Entity.getLink(WH.Types.TRANSMOG_SET, t));
                n.style.paddingBottom = "1em"
            }
        }
    }, {
        id: "name",
        type: "text",
        label: "Name",
        size: 40,
        validate: function(e) {
            if (!/\S+/.test(e)) {
                alert("Please enter a name.");
                return false
            }
            return true
        }
    }, {
        id: "armorType",
        type: "select",
        label: "Armor Type",
        options: {
            0: "(None)",
            1: "Cloth",
            2: "Leather",
            3: "Mail",
            4: "Plate",
            13: "Cosmetic"
        }
    }, {
        id: "quality",
        type: "select",
        label: "Quality",
        options: function() {
            let e = {};
            for (let t = WH.Wow.Item.QUALITY_POOR; t <= WH.Wow.Item.QUALITY_HEIRLOOM; t++) {
                e[t] = WH.Wow.Item.getQualityName(t)
            }
            return e
        }()
    }, {
        id: "note",
        type: "select",
        label: "Note",
        options: WH.cO({
            0: "(None)"
        }, WH.getPageData("wow.itemSet.notes")),
        optorder: function() {
            let e = Object.keys(WH.getPageData("wow.itemSet.notes"));
            e.sort((function(e, t) {
                let i = WH.getPageData("wow.itemSet.notes");
                return i[e].replace(/\s*\d+/g, "").localeCompare(i[t].replace(/\s*\d+/g, "")) || parseInt((i[e].match(/\d+/) || ["0"])[0]) - parseInt((i[t].match(/\d+/) || ["0"])[0]) || i[e].localeCompare(t[e])
            }
            ));
            e.unshift(0);
            return e
        }()
    }, {
        id: "tags",
        type: "checkbox",
        label: "Tags",
        options: {
            heroic: "Heroic",
            elite: "Elite",
            raidfinder: "Raid Finder",
            mythic: "Mythic"
        }
    }]
};
